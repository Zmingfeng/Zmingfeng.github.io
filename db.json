{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/DataStructure.jpg","path":"images/DataStructure.jpg","modified":1,"renderable":0},{"_id":"source/images/arr_list.jpg","path":"images/arr_list.jpg","modified":1,"renderable":0},{"_id":"source/images/arr_p.jpg","path":"images/arr_p.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1597246023800},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1597246023800},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1597246023801},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1597246023806},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1597246023806},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1597246023806},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1597246023806},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1597246023807},{"_id":"themes/next/_config.yml","hash":"31101080ea7fe1b0d973ba61b69dd95e2076ff25","modified":1597249393861},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1597246023807},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1597246023815},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1597246023843},{"_id":"source/404/index.md","hash":"fa794ef3f7519f2a23e27e4ad8a4a3b5b6a12174","modified":1597242108877},{"_id":"source/_posts/Get46Score.md","hash":"cc4557866f367a830b4cf971814623eaf2e0f153","modified":1597246985598},{"_id":"source/_posts/MyGetWeather.md","hash":"116bc215ff83bbd106c8538406876ff7def2917d","modified":1597246991268},{"_id":"source/_posts/GetClassTable.md","hash":"0a082c080529fca812f18d8641bfe5047d1481d2","modified":1597246987846},{"_id":"source/_posts/cpp中的引用.md","hash":"fa3afe9508ac5b239fb486edfbb2badc436401b4","modified":1597246981010},{"_id":"source/_posts/fabric1.4安装部署.md","hash":"4d5b3dff3adb7a214d8e29f122252b786f19d240","modified":1597246973685},{"_id":"source/_posts/区块链入门.md","hash":"85246467bc4e4515362feea5b074e105226be645","modified":1597247017166},{"_id":"source/_posts/指针数组、数组指针、指针函数、函数指针.md","hash":"298ef2510ab519db962202b5b942550d50f48acd","modified":1597246996868},{"_id":"source/_posts/数据结构及算法分析学习笔记.md","hash":"f67eb6b457f679082782ffa01f77b8fbc09fe6ea","modified":1597247001456},{"_id":"source/_posts/猜数字小游戏.md","hash":"544c32290460a82927d78d0de70d69cea25867eb","modified":1597247009485},{"_id":"source/about/index.md","hash":"d27e5843c7f904531e5ab7886e43f6564bfd16f9","modified":1597242108880},{"_id":"source/archives/index.md","hash":"cb4c09934bb9726315b8069b30be4a403c7b7696","modified":1597242108880},{"_id":"source/categories/index.md","hash":"59c51958f6bd04eed7c2d6f93a05909a21c7b4ab","modified":1597242108880},{"_id":"source/images/DataStructure.jpg","hash":"7edcc101da643e0660b06cdce9caf7e9f0aaa44c","modified":1597242108881},{"_id":"source/images/arr_list.jpg","hash":"ba3fbc74cb5e7038904275282e9ce15ef2f52332","modified":1597242108881},{"_id":"source/images/arr_p.jpg","hash":"2e10d3bca59e0f9fefbab19ffdfe17bfb1e24194","modified":1597242108882},{"_id":"source/schedule/index.md","hash":"cf7eb8621cbda1506bcffbdfbfbd7e2f72ede641","modified":1597248049075},{"_id":"source/tags/index.md","hash":"ee84ce992c7beb26ddd0f291b4baace96a9af35a","modified":1597242108882},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1597246023801},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1597246023801},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1597246023803},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1597246023804},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1597246023804},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1597246023804},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1597246023804},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1597246023805},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1597246023805},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1597246023805},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1597246023805},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1597246023808},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1597246023808},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1597246023809},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1597246023809},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1597246023809},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1597246023810},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1597246023810},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1597246023810},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1597246023811},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1597246023816},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1597246023816},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1597246023816},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1597246023816},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1597246023817},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1597246023817},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1597246023817},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1597246023818},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1597246023818},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1597246023818},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1597246023818},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1597246023819},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1597246023819},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1597246023819},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1597246023819},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1597246023820},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1597246023820},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1597246023820},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1597246023820},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1597246023821},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1597246023821},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1597246023821},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1597246023822},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1597246023842},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1597246023842},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1597246023842},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1597246023843},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1597246023843},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1597246023843},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1597246023849},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1597246023802},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1597246023802},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1597246023803},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1597246023803},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1597246023811},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1597246023811},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1597246023812},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1597246023812},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1597246023813},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1597246023813},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1597246023813},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1597246023814},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1597246023814},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1597246023814},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1597246023815},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1597246023815},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1597246023815},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1597246023822},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1597246023822},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1597246023823},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1597246023823},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4a4c71d6501f3fae38b25f312c6fa4c2eccde7b4","modified":1597246023823},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1597246023826},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1597246023827},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1597246023830},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1597246023830},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1597246023830},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1597246023831},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1597246023832},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1597246023832},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1597246023834},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1597246023837},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1597246023838},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1597246023839},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1597246023844},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1597246023847},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1597246023847},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1597246023847},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1597246023848},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1597246023848},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1597246023848},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1597246023849},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1597246023849},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1597246023849},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1597246023850},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1597246023850},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1597246023850},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1597246023850},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1597246023851},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1597246023851},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1597246023851},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1597246023851},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1597246023852},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1597246023852},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1597246023852},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1597246023872},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1597246023880},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1597246023880},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1597246023881},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1597246023881},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1597246023881},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1597246023882},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1597246023882},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1597246023882},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1597246023883},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1597246023883},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1597246023883},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1597246023884},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1597246023884},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1597246023884},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1597246023884},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1597246023885},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1597246023886},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1597246023886},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1597246023887},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1597246023888},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1597246023889},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1597246023824},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1597246023824},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1597246023824},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1597246023825},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1597246023825},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1597246023825},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1597246023826},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1597246023827},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1597246023827},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1597246023828},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1597246023828},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1597246023828},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1597246023828},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1597246023829},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1597246023829},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1597246023829},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1597246023826},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1597246023826},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1597246023830},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1597246023831},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1597246023831},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1597246023832},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1597246023832},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1597246023833},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1597246023833},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1597246023834},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1597246023834},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1597246023835},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1597246023835},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1597246023836},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1597246023836},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1597246023836},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1597246023837},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1597246023837},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1597246023837},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1597246023838},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1597246023838},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1597246023838},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1597246023839},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1597246023839},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1597246023840},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1597246023840},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1597246023840},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1597246023841},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1597246023841},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1597246023841},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1597246023841},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1597246023842},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1597246023844},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1597246023844},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1597246023845},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1597246023845},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1597246023845},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1597246023846},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1597246023846},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1597246023846},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1597246023846},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1597246023847},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1597246023847},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1597246023878},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1597246023879},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1597246023879},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1597246023879},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1597246023880},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1597246023887},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1597246023888},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1597246023893},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1597246023893},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1597246023853},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1597246023853},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1597246023854},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1597246023859},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1597246023863},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1597246023863},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1597246023866},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1597246023867},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1597246023867},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1597246023868},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1597246023869},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1597246023869},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1597246023869},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1597246023872},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1597246023872},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1597246023873},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1597246023873},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1597246023873},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1597246023874},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1597246023874},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1597246023874},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1597246023875},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1597246023875},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1597246023875},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1597246023876},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1597246023876},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1597246023876},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1597246023877},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1597246023877},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1597246023877},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1597246023878},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1597246023878},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1597246023891},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1597246023890},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1597246023854},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1597246023854},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1597246023854},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1597246023855},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1597246023855},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1597246023856},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1597246023855},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1597246023856},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1597246023856},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1597246023857},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1597246023857},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1597246023857},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1597246023857},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1597246023858},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1597246023858},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1597246023858},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1597246023858},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1597246023859},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1597246023859},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1597246023859},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1597246023860},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1597246023860},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1597246023860},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1597246023861},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1597246023861},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1597246023861},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1597246023862},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1597246023862},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1597246023862},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1597246023862},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1597246023863},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1597246023864},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1597246023864},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1597246023864},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1597246023864},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1597246023865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1597246023865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1597246023865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1597246023865},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1597246023866},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1597246023866},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1597246023867},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1597246023867},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1597246023868},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1597246023868},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1597246023870},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1597246023870},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1597246023870},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1597246023871},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1597246023871},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1597246023871},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1597246023871},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1597246023891},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1597246023892},{"_id":"public/404/index.html","hash":"ba81a8bc240585401134c4b21f7b2b0ab8174e59","modified":1597249451074},{"_id":"public/about/index.html","hash":"7a52385acba3ec439f93360b89f69f3a5c62ca83","modified":1597249451074},{"_id":"public/categories/index.html","hash":"46b2695c591cada0b601316ab688415b7475bf9a","modified":1597249451074},{"_id":"public/tags/index.html","hash":"cbb267cba7fa2428d841f194c9d03720696cdb43","modified":1597249451074},{"_id":"public/2020/01/22/区块链入门/index.html","hash":"ff9a442b9c9682c87cb77746293c2accab554466","modified":1597249451074},{"_id":"public/archives/2018/03/index.html","hash":"e0ee7d4d55591acbfa05333b9ee20b3aaf1e168d","modified":1597249451074},{"_id":"public/archives/2018/08/index.html","hash":"df0fd4fcefb8cc29a1bd800b917120bafda8a810","modified":1597249451074},{"_id":"public/archives/2020/index.html","hash":"4e71f3cbe78f9d6e12e1833ac43ea67acd9af3bb","modified":1597249451074},{"_id":"public/archives/2020/01/index.html","hash":"733c1e02b0922b9ada29dc52ddfd07b482d1aa66","modified":1597249451074},{"_id":"public/archives/2020/03/index.html","hash":"0954c14d2f89a5805223d4407760d0ec4edfbfd5","modified":1597249451074},{"_id":"public/categories/爬虫/index.html","hash":"3c59cccca5925f48e1aafa180e420fa6de916dbe","modified":1597249451074},{"_id":"public/categories/C/index.html","hash":"ad77332c148e2c4a2a71dcc2df98cce3f53d4ef3","modified":1597249451074},{"_id":"public/categories/区块链/index.html","hash":"ebf3e2738876ba0d39a770ce1606ded73e210351","modified":1597249451074},{"_id":"public/categories/数据结构及算法/index.html","hash":"9be6ff155ad093f0dde673a91960a0db07c41472","modified":1597249451074},{"_id":"public/categories/Python3/index.html","hash":"340876c7b781fc807c46e9c3128079ce1181ea8f","modified":1597249451074},{"_id":"public/tags/爬虫/index.html","hash":"e285f92a98a71ba8d7f1e92ab2c4fd1f1d6d3b1a","modified":1597249451074},{"_id":"public/tags/C/index.html","hash":"06e03d00758ab83683b5e41040b7730f377dd2aa","modified":1597249451074},{"_id":"public/tags/区块链/index.html","hash":"011b5c7bbccea5d98ecea720309dc09b5488d4af","modified":1597249451074},{"_id":"public/tags/数据结构及算法/index.html","hash":"58f09aa897ac9d991cc37cdcf10a867322152249","modified":1597249451074},{"_id":"public/tags/Python3/index.html","hash":"8e26663f2e0bd4a68b880921dffb82d81fb38693","modified":1597249451074},{"_id":"public/archives/index.html","hash":"818a7b1b2248610cae7c0b7741684ddef95652d0","modified":1597249451074},{"_id":"public/schedule/index.html","hash":"d4d57cc1c2bfdbd3809816e8b609d0af8a7de960","modified":1597249451074},{"_id":"public/2020/03/17/fabric1.4安装部署/index.html","hash":"473f80dac5ad75268dc6d629568d3c13f245813f","modified":1597249451074},{"_id":"public/2018/08/28/指针数组、数组指针、指针函数、函数指针/index.html","hash":"4da4eab364f4de8888a2e1dd43dad7e6bb532c19","modified":1597249451074},{"_id":"public/2018/08/25/数据结构及算法分析学习笔记/index.html","hash":"cf47e54aaf9091e1e2125ea89b5a6e246015ad41","modified":1597249451074},{"_id":"public/2018/03/17/cpp中的引用/index.html","hash":"d7c9e62a20439e667ac5fb62b70b4d0fcfeb78b9","modified":1597249451074},{"_id":"public/2018/03/16/猜数字小游戏/index.html","hash":"84e216a2a57b75ea6bec380fdaac52a4c1c3e315","modified":1597249451074},{"_id":"public/2018/03/09/GetClassTable/index.html","hash":"7d03c86f8b0fb25d55dc746b06c3ee9e139b68d7","modified":1597249451074},{"_id":"public/2018/03/09/MyGetWeather/index.html","hash":"127996e932f2f33998f65101b680ad8e27eff027","modified":1597249451074},{"_id":"public/2018/03/09/Get46Score/index.html","hash":"e2a4ff912a916c9bb4e880dd933b1427d9c1c0c6","modified":1597249451074},{"_id":"public/archives/2018/index.html","hash":"689e9206ded12478497342b8f723e033505502c7","modified":1597249451074},{"_id":"public/index.html","hash":"7079f1ba7d6451ed8d8eef3503e319845673c3d1","modified":1597249451074},{"_id":"public/images/arr_list.jpg","hash":"ba3fbc74cb5e7038904275282e9ce15ef2f52332","modified":1597249451074},{"_id":"public/images/arr_p.jpg","hash":"2e10d3bca59e0f9fefbab19ffdfe17bfb1e24194","modified":1597249451074},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1597249451074},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1597249451074},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1597249451074},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1597249451074},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1597249451074},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1597249451074},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1597249451074},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1597249451074},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1597249451074},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1597249451074},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1597249451074},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1597249451074},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1597249451074},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1597249451074},{"_id":"public/images/DataStructure.jpg","hash":"7edcc101da643e0660b06cdce9caf7e9f0aaa44c","modified":1597249451074},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1597249451074},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1597249451074},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1597249451074},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1597249451074},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1597249451074},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1597249451074},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1597249451074},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1597249451074},{"_id":"public/css/main.css","hash":"e87672a1932ad6455dc21ea8da695f10024ab320","modified":1597249451074},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1597249451074},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1597249451074},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1597249451074}],"Category":[{"name":"爬虫","_id":"ckdrl30m90004vkv97d09h4rv"},{"name":"C++","_id":"ckdrl30mq000kvkv99sxuajxd"},{"name":"区块链","_id":"ckdrl30mt000rvkv94mtw2e21"},{"name":"数据结构及算法","_id":"ckdrl30mv000yvkv951z6hyjs"},{"name":"Python3","_id":"ckdrl30mw0013vkv991ae5a7r"}],"Data":[],"Page":[{"title":"页面未找到","date":"2019-12-19T10:57:53.000Z","type":"404","_content":"\n页面走丢了。。。\n","source":"404/index.md","raw":"---\ntitle: 页面未找到\ndate: 2019-12-19 18:57:53\ntype: \"404\"\n---\n\n页面走丢了。。。\n","updated":"2020-08-12T14:21:48.877Z","path":"404/index.html","comments":1,"layout":"page","_id":"ckdrl30lz0000vkv92tbfepp7","content":"<p>页面走丢了。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>页面走丢了。。。</p>\n"},{"title":"关于","date":"2019-12-19T10:59:20.000Z","type":"about","_content":"\n个人笔记本\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-12-19 18:59:20\ntype: \"about\"\n---\n\n个人笔记本\n","updated":"2020-08-12T14:21:48.880Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckdrl30m70002vkv9689s7gmc","content":"<p>个人笔记本</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人笔记本</p>\n"},{"title":"归档","date":"2019-12-19T11:00:07.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2019-12-19 19:00:07\ntype: \"archives\"\n---\n","updated":"2020-08-12T14:21:48.880Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ckdrl30mc0006vkv9d4ivbx5j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-12-19T10:55:36.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-19 18:55:36\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-08-12T14:21:48.880Z","path":"categories/index.html","layout":"page","_id":"ckdrl30mf0008vkv9cbbm1w4i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-12-19T10:57:09.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-12-19 18:57:09\ntype: \"tags\"\n---\n","updated":"2020-08-12T14:21:48.882Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckdrl30mh000avkv9b8c0ebd5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2020-08-12T15:59:47.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2020-08-12 23:59:47\ntype: \"schedule\"\n---\n","updated":"2020-08-12T16:00:49.075Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ckdrl30mm000fvkv99mt032hd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"爬取四六级成绩查询系统","date":"2018-03-09T12:53:57.000Z","_content":"\n## 使用requests获取网页源码\n1.分析浏览器访问网页的过程\n\n首先选择 http://www.chsi.com.cn/cet/ 进行四六级的查询，查看浏览器提交的表单，然后发现，实际网址就是 http://www.chsi.com.cn/cet/query 后面加上输入的准考证号，和姓名，故选择 http://www.chsi.com.cn/cet/query 作为访问基址。\n<!-- more -->\n<!-- more -->\n2.查看46级成绩所在页面的源码\n```python\nimport requests\nurlBase = 'http://www.chsi.com.cn/cet/query'\n\nzkzh = '***************'\nxm = '***'\npayload = {'zkzh':zkzh,'xm':xm}\nhtml = requests.get(urlBase,params=payload)\nprint(html.url)\n```\n\"\\*\"替换成你的准考证号和姓名，requests.get()返回的对象的url属性，保存的是当前访问的网页的链接，但是事实上我们并没有得到下面这样的链接，这是因为没有添加一些header。\n```\nhttp://www.chsi.com.cn/cet/query？zkzh=xiaoming&xm=123 \n```\n3.添加header，伪装成浏览器\n将最后两行代码改成下面这样：\n```python\n...\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36',\n           'Referer': 'http://www.chsi.com.cn/cet/'\n           }\nhtml = requests.get(urlBase,params=payload,headers=headers)\t\nprint(html.url)\t   \n```\nheaders是个dict，里面的headers映射关系，可以通过fidder监控网页访问得到。\n\n4.获取网页源码\n```python\n...\ndata = html.content\n```\ncontent属性代表返回的是bytes型的网页文件。\n## 使用BeautifulSoup进行网页解析\n```python\n...\ntag_tmp = BeautifulSoup(data, 'lxml')\nm = tag_tmp.find(id='leftH').find('table')\ny = m.find_all('tr')\nfor x in y:\n    if x.find('td') != None:\n        print(x.find('th').get_text().strip() + x.find('td').get_text().strip())\n    else:\n        print(' ' * 3 + x.find('th').get_text().strip())\n```\n将获取的四六级成绩所在的页面源码提交给BeautifulSoup进行网页解析，分析得到的信息再通过一定的格式组合，就可以打印出来查询的个人信息和四六级成绩了。\n","source":"_posts/Get46Score.md","raw":"---\ntitle: 爬取四六级成绩查询系统\ndate: 2018-03-09 20:53:57\ntags: 爬虫\ncategories: 爬虫\n\n---\n\n## 使用requests获取网页源码\n1.分析浏览器访问网页的过程\n\n首先选择 http://www.chsi.com.cn/cet/ 进行四六级的查询，查看浏览器提交的表单，然后发现，实际网址就是 http://www.chsi.com.cn/cet/query 后面加上输入的准考证号，和姓名，故选择 http://www.chsi.com.cn/cet/query 作为访问基址。\n<!-- more -->\n<!-- more -->\n2.查看46级成绩所在页面的源码\n```python\nimport requests\nurlBase = 'http://www.chsi.com.cn/cet/query'\n\nzkzh = '***************'\nxm = '***'\npayload = {'zkzh':zkzh,'xm':xm}\nhtml = requests.get(urlBase,params=payload)\nprint(html.url)\n```\n\"\\*\"替换成你的准考证号和姓名，requests.get()返回的对象的url属性，保存的是当前访问的网页的链接，但是事实上我们并没有得到下面这样的链接，这是因为没有添加一些header。\n```\nhttp://www.chsi.com.cn/cet/query？zkzh=xiaoming&xm=123 \n```\n3.添加header，伪装成浏览器\n将最后两行代码改成下面这样：\n```python\n...\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36',\n           'Referer': 'http://www.chsi.com.cn/cet/'\n           }\nhtml = requests.get(urlBase,params=payload,headers=headers)\t\nprint(html.url)\t   \n```\nheaders是个dict，里面的headers映射关系，可以通过fidder监控网页访问得到。\n\n4.获取网页源码\n```python\n...\ndata = html.content\n```\ncontent属性代表返回的是bytes型的网页文件。\n## 使用BeautifulSoup进行网页解析\n```python\n...\ntag_tmp = BeautifulSoup(data, 'lxml')\nm = tag_tmp.find(id='leftH').find('table')\ny = m.find_all('tr')\nfor x in y:\n    if x.find('td') != None:\n        print(x.find('th').get_text().strip() + x.find('td').get_text().strip())\n    else:\n        print(' ' * 3 + x.find('th').get_text().strip())\n```\n将获取的四六级成绩所在的页面源码提交给BeautifulSoup进行网页解析，分析得到的信息再通过一定的格式组合，就可以打印出来查询的个人信息和四六级成绩了。\n","slug":"Get46Score","published":1,"updated":"2020-08-12T15:43:05.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30m40001vkv9c8gy8zow","content":"<h2 id=\"使用requests获取网页源码\"><a href=\"#使用requests获取网页源码\" class=\"headerlink\" title=\"使用requests获取网页源码\"></a>使用requests获取网页源码</h2><p>1.分析浏览器访问网页的过程</p>\n<p>首先选择 <a href=\"http://www.chsi.com.cn/cet/\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/</a> 进行四六级的查询，查看浏览器提交的表单，然后发现，实际网址就是 <a href=\"http://www.chsi.com.cn/cet/query\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/query</a> 后面加上输入的准考证号，和姓名，故选择 <a href=\"http://www.chsi.com.cn/cet/query\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/query</a> 作为访问基址。</p>\n<a id=\"more\"></a>\n<!-- more -->\n<p>2.查看46级成绩所在页面的源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">urlBase = <span class=\"string\">'http://www.chsi.com.cn/cet/query'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zkzh = <span class=\"string\">'***************'</span></span><br><span class=\"line\">xm = <span class=\"string\">'***'</span></span><br><span class=\"line\">payload = &#123;<span class=\"string\">'zkzh'</span>:zkzh,<span class=\"string\">'xm'</span>:xm&#125;</span><br><span class=\"line\">html = requests.get(urlBase,params=payload)</span><br><span class=\"line\">print(html.url)</span><br></pre></td></tr></table></figure>\n<p>“*“替换成你的准考证号和姓名，requests.get()返回的对象的url属性，保存的是当前访问的网页的链接，但是事实上我们并没有得到下面这样的链接，这是因为没有添加一些header。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;www.chsi.com.cn&#x2F;cet&#x2F;query？zkzh&#x3D;xiaoming&amp;xm&#x3D;123</span><br></pre></td></tr></table></figure>\n<p>3.添加header，伪装成浏览器<br>将最后两行代码改成下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>,</span><br><span class=\"line\">           <span class=\"string\">'Referer'</span>: <span class=\"string\">'http://www.chsi.com.cn/cet/'</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">html = requests.get(urlBase,params=payload,headers=headers)\t</span><br><span class=\"line\">print(html.url)</span><br></pre></td></tr></table></figure>\n<p>headers是个dict，里面的headers映射关系，可以通过fidder监控网页访问得到。</p>\n<p>4.获取网页源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">data = html.content</span><br></pre></td></tr></table></figure>\n<p>content属性代表返回的是bytes型的网页文件。</p>\n<h2 id=\"使用BeautifulSoup进行网页解析\"><a href=\"#使用BeautifulSoup进行网页解析\" class=\"headerlink\" title=\"使用BeautifulSoup进行网页解析\"></a>使用BeautifulSoup进行网页解析</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">tag_tmp = BeautifulSoup(data, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">m = tag_tmp.find(id=<span class=\"string\">'leftH'</span>).find(<span class=\"string\">'table'</span>)</span><br><span class=\"line\">y = m.find_all(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> y:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.find(<span class=\"string\">'td'</span>) != <span class=\"literal\">None</span>:</span><br><span class=\"line\">        print(x.find(<span class=\"string\">'th'</span>).get_text().strip() + x.find(<span class=\"string\">'td'</span>).get_text().strip())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">' '</span> * <span class=\"number\">3</span> + x.find(<span class=\"string\">'th'</span>).get_text().strip())</span><br></pre></td></tr></table></figure>\n<p>将获取的四六级成绩所在的页面源码提交给BeautifulSoup进行网页解析，分析得到的信息再通过一定的格式组合，就可以打印出来查询的个人信息和四六级成绩了。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用requests获取网页源码\"><a href=\"#使用requests获取网页源码\" class=\"headerlink\" title=\"使用requests获取网页源码\"></a>使用requests获取网页源码</h2><p>1.分析浏览器访问网页的过程</p>\n<p>首先选择 <a href=\"http://www.chsi.com.cn/cet/\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/</a> 进行四六级的查询，查看浏览器提交的表单，然后发现，实际网址就是 <a href=\"http://www.chsi.com.cn/cet/query\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/query</a> 后面加上输入的准考证号，和姓名，故选择 <a href=\"http://www.chsi.com.cn/cet/query\" target=\"_blank\" rel=\"noopener\">http://www.chsi.com.cn/cet/query</a> 作为访问基址。</p>","more":"<!-- more -->\n<p>2.查看46级成绩所在页面的源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">urlBase = <span class=\"string\">'http://www.chsi.com.cn/cet/query'</span></span><br><span class=\"line\"></span><br><span class=\"line\">zkzh = <span class=\"string\">'***************'</span></span><br><span class=\"line\">xm = <span class=\"string\">'***'</span></span><br><span class=\"line\">payload = &#123;<span class=\"string\">'zkzh'</span>:zkzh,<span class=\"string\">'xm'</span>:xm&#125;</span><br><span class=\"line\">html = requests.get(urlBase,params=payload)</span><br><span class=\"line\">print(html.url)</span><br></pre></td></tr></table></figure>\n<p>“*“替换成你的准考证号和姓名，requests.get()返回的对象的url属性，保存的是当前访问的网页的链接，但是事实上我们并没有得到下面这样的链接，这是因为没有添加一些header。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;www.chsi.com.cn&#x2F;cet&#x2F;query？zkzh&#x3D;xiaoming&amp;xm&#x3D;123</span><br></pre></td></tr></table></figure>\n<p>3.添加header，伪装成浏览器<br>将最后两行代码改成下面这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">headers = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'</span>,</span><br><span class=\"line\">           <span class=\"string\">'Referer'</span>: <span class=\"string\">'http://www.chsi.com.cn/cet/'</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">html = requests.get(urlBase,params=payload,headers=headers)\t</span><br><span class=\"line\">print(html.url)</span><br></pre></td></tr></table></figure>\n<p>headers是个dict，里面的headers映射关系，可以通过fidder监控网页访问得到。</p>\n<p>4.获取网页源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">data = html.content</span><br></pre></td></tr></table></figure>\n<p>content属性代表返回的是bytes型的网页文件。</p>\n<h2 id=\"使用BeautifulSoup进行网页解析\"><a href=\"#使用BeautifulSoup进行网页解析\" class=\"headerlink\" title=\"使用BeautifulSoup进行网页解析\"></a>使用BeautifulSoup进行网页解析</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">tag_tmp = BeautifulSoup(data, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">m = tag_tmp.find(id=<span class=\"string\">'leftH'</span>).find(<span class=\"string\">'table'</span>)</span><br><span class=\"line\">y = m.find_all(<span class=\"string\">'tr'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> y:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.find(<span class=\"string\">'td'</span>) != <span class=\"literal\">None</span>:</span><br><span class=\"line\">        print(x.find(<span class=\"string\">'th'</span>).get_text().strip() + x.find(<span class=\"string\">'td'</span>).get_text().strip())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">' '</span> * <span class=\"number\">3</span> + x.find(<span class=\"string\">'th'</span>).get_text().strip())</span><br></pre></td></tr></table></figure>\n<p>将获取的四六级成绩所在的页面源码提交给BeautifulSoup进行网页解析，分析得到的信息再通过一定的格式组合，就可以打印出来查询的个人信息和四六级成绩了。</p>"},{"title":"爬取百度天气预报并通过邮件通知","date":"2018-03-09T12:54:02.000Z","_content":"\n## requests+BeautifulSoup抓取百度天气上的天气预报\npython的优势在于有着各种各样功能强大的标准库和第三方库，使得十分简洁的python代码便可以实现相对复杂的功能，首先先了解以下利用requests抓取网页\n### 使用requests模块抓取网页\n1.导入requests库\n```python\nimport requests\n```\n<!-- more -->\n<!-- more -->\n2.抓取百度天气网页源码\n```python\nurl = 'http://www.baidutianqi.com/'\nhtml = requests.get(url).content\n```\n抓取到的网页是bytes型，想要得到字符型，就像下面这样把content换成text就行：\n```python\nurl = 'http://www.baidutianqi.com/'\nhtml = requests.get(url).text\n```\nrequests的用法很简单，可以参考：[requests官方文档](http://cn.python-requests.org/zh_CN/latest/user/quickstart.html)\n### 利用BeautifulSoup解析网页获取天气信息\n1.导入BeautifulSoup库\n```python\nfrom bs4 import BeautifulSoup\n```\n2.利用BeautifulSoup解析网页\n```python\ntag_tmp = BeautifulSoup(html,'lxml')\nprovinceInfo = tag_tmp.find(id='provinces').find('ul').find_all('li')\n```\n'lxml'是lxml HTML解析器，速度快，容错能力强。\n将html参数传入BeautifulSoup类中，获得一个BeautifulSoup对象，其实就是一个tag对象，可调用对象find()和find_all()方法来匹配到期望的标签。\n\n注意：find()方法返回的是文档中符合条件的tag对象，而find_all()返回的是符合条件的所有的tag组成的list\n```python\ncityName = []\ncityLink = []\n```\n建立两个list，存放城市的名称和城市天气的链接\n```python\nweather = {}\nfor x in provinceInfo:\n    html = requests.get(x.a['href']).content\n    tag_tmp = BeautifulSoup(html, 'lxml')\n    city_tmp = tag_tmp.find(id='citys').find('ul').find_all('li')\n    for y in city_tmp:\n        tmp = y.find('a')\n        cityName.append(tmp.get_text().strip('天气预报'))\n        cityLink.append(tmp['href'])\n    result = list(zip(cityName,cityLink))\n    for x,y in result:\n        weather[x] = y\n```\na['href']是获取a标签中的'href'属性，strip()不传入参数时，默认去掉字符串前后的空格，zip()可以将传入的两个Iterable对应的元素组成tuple，weather是存放城市和天气对应关系的dict，这样城市和天气信息就对应起来了。\n\n想了解BeautifulSoup的具体用法，参考：[BeautifulSoup官方文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)\n3.对获取的城市天气所在链接进行处理\n```python\ncityIn = '上海'\n    if cityIn in weather.keys():\n        html = requests.get(weather[cityIn]).content\n        weather_tmp = BeautifulSoup(html, 'lxml')\n        weather7days = weather_tmp.find(id=\"weather\").find('ul').find_all('li')\n        day = weather7days[0]\n        l_tmp = day.get_text().split(' ')\n        w = l_tmp[0].strip()\n        x = l_tmp[2].strip() + l_tmp[3].strip()\n        y = x.split('℃')[0].strip() + '℃'\n        z = x.split('℃')[1].strip()\n        print(w+'\\n'+y+'\\n'+z + '\\n' + '-'*20)\n```\nweather7days字存放的是连续七天的天气预报的tag组成的list，用day = weather7days[0]获取今天天气预报的tag，day.get_text()获取tag中天气文本（温度，风级，阴晴等），接下来就是文本分离部分，不同网站的天气格式略有不同，可以根据不同的网站，使用不同的分离方法。\n## 使用smtplib+email发送邮件\nemail模块用于生成邮件，而smtplib模块用于发送邮件，具体代码如下：\n```python\nfrom email.mime.text import MIMEText\nimport smtplib\ndef send_email(content):\n    mail_to = \"目标邮箱\"\n    mail_server = \"源邮箱服务器\"\n    mail_user = \"源邮箱\"\n    mail_pass = \"源邮箱密码\"\n    msg = MIMEText(content)\n    msg['Subject'] = '今日天气预报'\n    msg['From'] = mail_user\n    msg['To'] = mail_to\n    try:\n        s = smtplib.SMTP()\n        s.connect(mail_server)\n        s.login(mail_user, mail_pass)\n        s.sendmail(mail_user, mail_to, msg.as_string())\n        s.close()\n        print('发送成功！')\n        return True\n    except Exception as e:\n        print('发送失败！')\n        print(e)\n        return False\n```\n首先导入了email和stmplib库，然后定义了一个sned_email()函数，mail_to代表目标邮箱，mail_server是你的邮箱服务器，例如163邮箱是\"smtp.163.com\"，mail_user和mail_pass是你的邮箱和密码。\n\n\n\n\n","source":"_posts/MyGetWeather.md","raw":"---\ntitle: 爬取百度天气预报并通过邮件通知\ndate: 2018-03-09 20:54:02\ntags: 爬虫\ncategories: 爬虫\n\n---\n\n## requests+BeautifulSoup抓取百度天气上的天气预报\npython的优势在于有着各种各样功能强大的标准库和第三方库，使得十分简洁的python代码便可以实现相对复杂的功能，首先先了解以下利用requests抓取网页\n### 使用requests模块抓取网页\n1.导入requests库\n```python\nimport requests\n```\n<!-- more -->\n<!-- more -->\n2.抓取百度天气网页源码\n```python\nurl = 'http://www.baidutianqi.com/'\nhtml = requests.get(url).content\n```\n抓取到的网页是bytes型，想要得到字符型，就像下面这样把content换成text就行：\n```python\nurl = 'http://www.baidutianqi.com/'\nhtml = requests.get(url).text\n```\nrequests的用法很简单，可以参考：[requests官方文档](http://cn.python-requests.org/zh_CN/latest/user/quickstart.html)\n### 利用BeautifulSoup解析网页获取天气信息\n1.导入BeautifulSoup库\n```python\nfrom bs4 import BeautifulSoup\n```\n2.利用BeautifulSoup解析网页\n```python\ntag_tmp = BeautifulSoup(html,'lxml')\nprovinceInfo = tag_tmp.find(id='provinces').find('ul').find_all('li')\n```\n'lxml'是lxml HTML解析器，速度快，容错能力强。\n将html参数传入BeautifulSoup类中，获得一个BeautifulSoup对象，其实就是一个tag对象，可调用对象find()和find_all()方法来匹配到期望的标签。\n\n注意：find()方法返回的是文档中符合条件的tag对象，而find_all()返回的是符合条件的所有的tag组成的list\n```python\ncityName = []\ncityLink = []\n```\n建立两个list，存放城市的名称和城市天气的链接\n```python\nweather = {}\nfor x in provinceInfo:\n    html = requests.get(x.a['href']).content\n    tag_tmp = BeautifulSoup(html, 'lxml')\n    city_tmp = tag_tmp.find(id='citys').find('ul').find_all('li')\n    for y in city_tmp:\n        tmp = y.find('a')\n        cityName.append(tmp.get_text().strip('天气预报'))\n        cityLink.append(tmp['href'])\n    result = list(zip(cityName,cityLink))\n    for x,y in result:\n        weather[x] = y\n```\na['href']是获取a标签中的'href'属性，strip()不传入参数时，默认去掉字符串前后的空格，zip()可以将传入的两个Iterable对应的元素组成tuple，weather是存放城市和天气对应关系的dict，这样城市和天气信息就对应起来了。\n\n想了解BeautifulSoup的具体用法，参考：[BeautifulSoup官方文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)\n3.对获取的城市天气所在链接进行处理\n```python\ncityIn = '上海'\n    if cityIn in weather.keys():\n        html = requests.get(weather[cityIn]).content\n        weather_tmp = BeautifulSoup(html, 'lxml')\n        weather7days = weather_tmp.find(id=\"weather\").find('ul').find_all('li')\n        day = weather7days[0]\n        l_tmp = day.get_text().split(' ')\n        w = l_tmp[0].strip()\n        x = l_tmp[2].strip() + l_tmp[3].strip()\n        y = x.split('℃')[0].strip() + '℃'\n        z = x.split('℃')[1].strip()\n        print(w+'\\n'+y+'\\n'+z + '\\n' + '-'*20)\n```\nweather7days字存放的是连续七天的天气预报的tag组成的list，用day = weather7days[0]获取今天天气预报的tag，day.get_text()获取tag中天气文本（温度，风级，阴晴等），接下来就是文本分离部分，不同网站的天气格式略有不同，可以根据不同的网站，使用不同的分离方法。\n## 使用smtplib+email发送邮件\nemail模块用于生成邮件，而smtplib模块用于发送邮件，具体代码如下：\n```python\nfrom email.mime.text import MIMEText\nimport smtplib\ndef send_email(content):\n    mail_to = \"目标邮箱\"\n    mail_server = \"源邮箱服务器\"\n    mail_user = \"源邮箱\"\n    mail_pass = \"源邮箱密码\"\n    msg = MIMEText(content)\n    msg['Subject'] = '今日天气预报'\n    msg['From'] = mail_user\n    msg['To'] = mail_to\n    try:\n        s = smtplib.SMTP()\n        s.connect(mail_server)\n        s.login(mail_user, mail_pass)\n        s.sendmail(mail_user, mail_to, msg.as_string())\n        s.close()\n        print('发送成功！')\n        return True\n    except Exception as e:\n        print('发送失败！')\n        print(e)\n        return False\n```\n首先导入了email和stmplib库，然后定义了一个sned_email()函数，mail_to代表目标邮箱，mail_server是你的邮箱服务器，例如163邮箱是\"smtp.163.com\"，mail_user和mail_pass是你的邮箱和密码。\n\n\n\n\n","slug":"MyGetWeather","published":1,"updated":"2020-08-12T15:43:11.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30m80003vkv947468gyr","content":"<h2 id=\"requests-BeautifulSoup抓取百度天气上的天气预报\"><a href=\"#requests-BeautifulSoup抓取百度天气上的天气预报\" class=\"headerlink\" title=\"requests+BeautifulSoup抓取百度天气上的天气预报\"></a>requests+BeautifulSoup抓取百度天气上的天气预报</h2><p>python的优势在于有着各种各样功能强大的标准库和第三方库，使得十分简洁的python代码便可以实现相对复杂的功能，首先先了解以下利用requests抓取网页</p>\n<h3 id=\"使用requests模块抓取网页\"><a href=\"#使用requests模块抓取网页\" class=\"headerlink\" title=\"使用requests模块抓取网页\"></a>使用requests模块抓取网页</h3><p>1.导入requests库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<!-- more -->\n<p>2.抓取百度天气网页源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://www.baidutianqi.com/'</span></span><br><span class=\"line\">html = requests.get(url).content</span><br></pre></td></tr></table></figure>\n<p>抓取到的网页是bytes型，想要得到字符型，就像下面这样把content换成text就行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://www.baidutianqi.com/'</span></span><br><span class=\"line\">html = requests.get(url).text</span><br></pre></td></tr></table></figure>\n<p>requests的用法很简单，可以参考：<a href=\"http://cn.python-requests.org/zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">requests官方文档</a></p>\n<h3 id=\"利用BeautifulSoup解析网页获取天气信息\"><a href=\"#利用BeautifulSoup解析网页获取天气信息\" class=\"headerlink\" title=\"利用BeautifulSoup解析网页获取天气信息\"></a>利用BeautifulSoup解析网页获取天气信息</h3><p>1.导入BeautifulSoup库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>\n<p>2.利用BeautifulSoup解析网页</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag_tmp = BeautifulSoup(html,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">provinceInfo = tag_tmp.find(id=<span class=\"string\">'provinces'</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br></pre></td></tr></table></figure>\n<p>‘lxml’是lxml HTML解析器，速度快，容错能力强。<br>将html参数传入BeautifulSoup类中，获得一个BeautifulSoup对象，其实就是一个tag对象，可调用对象find()和find_all()方法来匹配到期望的标签。</p>\n<p>注意：find()方法返回的是文档中符合条件的tag对象，而find_all()返回的是符合条件的所有的tag组成的list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityName = []</span><br><span class=\"line\">cityLink = []</span><br></pre></td></tr></table></figure>\n<p>建立两个list，存放城市的名称和城市天气的链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> provinceInfo:</span><br><span class=\"line\">    html = requests.get(x.a[<span class=\"string\">'href'</span>]).content</span><br><span class=\"line\">    tag_tmp = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    city_tmp = tag_tmp.find(id=<span class=\"string\">'citys'</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> city_tmp:</span><br><span class=\"line\">        tmp = y.find(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">        cityName.append(tmp.get_text().strip(<span class=\"string\">'天气预报'</span>))</span><br><span class=\"line\">        cityLink.append(tmp[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">    result = list(zip(cityName,cityLink))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        weather[x] = y</span><br></pre></td></tr></table></figure>\n<p>a[‘href’]是获取a标签中的’href’属性，strip()不传入参数时，默认去掉字符串前后的空格，zip()可以将传入的两个Iterable对应的元素组成tuple，weather是存放城市和天气对应关系的dict，这样城市和天气信息就对应起来了。</p>\n<p>想了解BeautifulSoup的具体用法，参考：<a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup官方文档</a><br>3.对获取的城市天气所在链接进行处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityIn = <span class=\"string\">'上海'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cityIn <span class=\"keyword\">in</span> weather.keys():</span><br><span class=\"line\">        html = requests.get(weather[cityIn]).content</span><br><span class=\"line\">        weather_tmp = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">        weather7days = weather_tmp.find(id=<span class=\"string\">\"weather\"</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">        day = weather7days[<span class=\"number\">0</span>]</span><br><span class=\"line\">        l_tmp = day.get_text().split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">        w = l_tmp[<span class=\"number\">0</span>].strip()</span><br><span class=\"line\">        x = l_tmp[<span class=\"number\">2</span>].strip() + l_tmp[<span class=\"number\">3</span>].strip()</span><br><span class=\"line\">        y = x.split(<span class=\"string\">'℃'</span>)[<span class=\"number\">0</span>].strip() + <span class=\"string\">'℃'</span></span><br><span class=\"line\">        z = x.split(<span class=\"string\">'℃'</span>)[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">        print(w+<span class=\"string\">'\\n'</span>+y+<span class=\"string\">'\\n'</span>+z + <span class=\"string\">'\\n'</span> + <span class=\"string\">'-'</span>*<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>weather7days字存放的是连续七天的天气预报的tag组成的list，用day = weather7days[0]获取今天天气预报的tag，day.get_text()获取tag中天气文本（温度，风级，阴晴等），接下来就是文本分离部分，不同网站的天气格式略有不同，可以根据不同的网站，使用不同的分离方法。</p>\n<h2 id=\"使用smtplib-email发送邮件\"><a href=\"#使用smtplib-email发送邮件\" class=\"headerlink\" title=\"使用smtplib+email发送邮件\"></a>使用smtplib+email发送邮件</h2><p>email模块用于生成邮件，而smtplib模块用于发送邮件，具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_email</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    mail_to = <span class=\"string\">\"目标邮箱\"</span></span><br><span class=\"line\">    mail_server = <span class=\"string\">\"源邮箱服务器\"</span></span><br><span class=\"line\">    mail_user = <span class=\"string\">\"源邮箱\"</span></span><br><span class=\"line\">    mail_pass = <span class=\"string\">\"源邮箱密码\"</span></span><br><span class=\"line\">    msg = MIMEText(content)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = <span class=\"string\">'今日天气预报'</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = mail_user</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = mail_to</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(mail_server)</span><br><span class=\"line\">        s.login(mail_user, mail_pass)</span><br><span class=\"line\">        s.sendmail(mail_user, mail_to, msg.as_string())</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">        print(<span class=\"string\">'发送成功！'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">'发送失败！'</span>)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>首先导入了email和stmplib库，然后定义了一个sned_email()函数，mail_to代表目标邮箱，mail_server是你的邮箱服务器，例如163邮箱是”smtp.163.com”，mail_user和mail_pass是你的邮箱和密码。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"requests-BeautifulSoup抓取百度天气上的天气预报\"><a href=\"#requests-BeautifulSoup抓取百度天气上的天气预报\" class=\"headerlink\" title=\"requests+BeautifulSoup抓取百度天气上的天气预报\"></a>requests+BeautifulSoup抓取百度天气上的天气预报</h2><p>python的优势在于有着各种各样功能强大的标准库和第三方库，使得十分简洁的python代码便可以实现相对复杂的功能，首先先了解以下利用requests抓取网页</p>\n<h3 id=\"使用requests模块抓取网页\"><a href=\"#使用requests模块抓取网页\" class=\"headerlink\" title=\"使用requests模块抓取网页\"></a>使用requests模块抓取网页</h3><p>1.导入requests库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br></pre></td></tr></table></figure>","more":"<!-- more -->\n<p>2.抓取百度天气网页源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://www.baidutianqi.com/'</span></span><br><span class=\"line\">html = requests.get(url).content</span><br></pre></td></tr></table></figure>\n<p>抓取到的网页是bytes型，想要得到字符型，就像下面这样把content换成text就行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://www.baidutianqi.com/'</span></span><br><span class=\"line\">html = requests.get(url).text</span><br></pre></td></tr></table></figure>\n<p>requests的用法很简单，可以参考：<a href=\"http://cn.python-requests.org/zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">requests官方文档</a></p>\n<h3 id=\"利用BeautifulSoup解析网页获取天气信息\"><a href=\"#利用BeautifulSoup解析网页获取天气信息\" class=\"headerlink\" title=\"利用BeautifulSoup解析网页获取天气信息\"></a>利用BeautifulSoup解析网页获取天气信息</h3><p>1.导入BeautifulSoup库</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure>\n<p>2.利用BeautifulSoup解析网页</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag_tmp = BeautifulSoup(html,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">provinceInfo = tag_tmp.find(id=<span class=\"string\">'provinces'</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br></pre></td></tr></table></figure>\n<p>‘lxml’是lxml HTML解析器，速度快，容错能力强。<br>将html参数传入BeautifulSoup类中，获得一个BeautifulSoup对象，其实就是一个tag对象，可调用对象find()和find_all()方法来匹配到期望的标签。</p>\n<p>注意：find()方法返回的是文档中符合条件的tag对象，而find_all()返回的是符合条件的所有的tag组成的list</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityName = []</span><br><span class=\"line\">cityLink = []</span><br></pre></td></tr></table></figure>\n<p>建立两个list，存放城市的名称和城市天气的链接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weather = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> provinceInfo:</span><br><span class=\"line\">    html = requests.get(x.a[<span class=\"string\">'href'</span>]).content</span><br><span class=\"line\">    tag_tmp = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">    city_tmp = tag_tmp.find(id=<span class=\"string\">'citys'</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> city_tmp:</span><br><span class=\"line\">        tmp = y.find(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">        cityName.append(tmp.get_text().strip(<span class=\"string\">'天气预报'</span>))</span><br><span class=\"line\">        cityLink.append(tmp[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">    result = list(zip(cityName,cityLink))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        weather[x] = y</span><br></pre></td></tr></table></figure>\n<p>a[‘href’]是获取a标签中的’href’属性，strip()不传入参数时，默认去掉字符串前后的空格，zip()可以将传入的两个Iterable对应的元素组成tuple，weather是存放城市和天气对应关系的dict，这样城市和天气信息就对应起来了。</p>\n<p>想了解BeautifulSoup的具体用法，参考：<a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">BeautifulSoup官方文档</a><br>3.对获取的城市天气所在链接进行处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cityIn = <span class=\"string\">'上海'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cityIn <span class=\"keyword\">in</span> weather.keys():</span><br><span class=\"line\">        html = requests.get(weather[cityIn]).content</span><br><span class=\"line\">        weather_tmp = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">        weather7days = weather_tmp.find(id=<span class=\"string\">\"weather\"</span>).find(<span class=\"string\">'ul'</span>).find_all(<span class=\"string\">'li'</span>)</span><br><span class=\"line\">        day = weather7days[<span class=\"number\">0</span>]</span><br><span class=\"line\">        l_tmp = day.get_text().split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">        w = l_tmp[<span class=\"number\">0</span>].strip()</span><br><span class=\"line\">        x = l_tmp[<span class=\"number\">2</span>].strip() + l_tmp[<span class=\"number\">3</span>].strip()</span><br><span class=\"line\">        y = x.split(<span class=\"string\">'℃'</span>)[<span class=\"number\">0</span>].strip() + <span class=\"string\">'℃'</span></span><br><span class=\"line\">        z = x.split(<span class=\"string\">'℃'</span>)[<span class=\"number\">1</span>].strip()</span><br><span class=\"line\">        print(w+<span class=\"string\">'\\n'</span>+y+<span class=\"string\">'\\n'</span>+z + <span class=\"string\">'\\n'</span> + <span class=\"string\">'-'</span>*<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<p>weather7days字存放的是连续七天的天气预报的tag组成的list，用day = weather7days[0]获取今天天气预报的tag，day.get_text()获取tag中天气文本（温度，风级，阴晴等），接下来就是文本分离部分，不同网站的天气格式略有不同，可以根据不同的网站，使用不同的分离方法。</p>\n<h2 id=\"使用smtplib-email发送邮件\"><a href=\"#使用smtplib-email发送邮件\" class=\"headerlink\" title=\"使用smtplib+email发送邮件\"></a>使用smtplib+email发送邮件</h2><p>email模块用于生成邮件，而smtplib模块用于发送邮件，具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</span><br><span class=\"line\"><span class=\"keyword\">import</span> smtplib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_email</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    mail_to = <span class=\"string\">\"目标邮箱\"</span></span><br><span class=\"line\">    mail_server = <span class=\"string\">\"源邮箱服务器\"</span></span><br><span class=\"line\">    mail_user = <span class=\"string\">\"源邮箱\"</span></span><br><span class=\"line\">    mail_pass = <span class=\"string\">\"源邮箱密码\"</span></span><br><span class=\"line\">    msg = MIMEText(content)</span><br><span class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = <span class=\"string\">'今日天气预报'</span></span><br><span class=\"line\">    msg[<span class=\"string\">'From'</span>] = mail_user</span><br><span class=\"line\">    msg[<span class=\"string\">'To'</span>] = mail_to</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = smtplib.SMTP()</span><br><span class=\"line\">        s.connect(mail_server)</span><br><span class=\"line\">        s.login(mail_user, mail_pass)</span><br><span class=\"line\">        s.sendmail(mail_user, mail_to, msg.as_string())</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">        print(<span class=\"string\">'发送成功！'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">'发送失败！'</span>)</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>首先导入了email和stmplib库，然后定义了一个sned_email()函数，mail_to代表目标邮箱，mail_server是你的邮箱服务器，例如163邮箱是”smtp.163.com”，mail_user和mail_pass是你的邮箱和密码。</p>"},{"title":"浅析C++中的引用","date":"2018-03-17T08:47:30.000Z","_content":"\n### 为已定义变量创建别名\n\n定义变量时，在变量前加上‘&’符号，就表示定义一个引用。首先声明，引用只是为引用对象创建了别名，而并未开辟新的内存。\n先看下面一段代码：\n```C++\n        double i = 42.0;\n        double &r = i;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n\n```\n<!-- more -->\n<!-- more -->\n定义一个double类型的变量，并对其进行同类型引用，输出如下：\n```C++\nthe value of i is 42\nthe value of r is 42\nthe address of i is 0x7ffcf8119c88\nthe address of r is 0x7ffcf8119c88\n```\n可以看到，不仅指向的字面值相等，其内存地址也相等。\n\n### 非const引用的限制\n非const引用只能进行同类型引用，否则编译器会报错\n比如：\n```C++\n        double i = 42.0;\n        int &r = i;\n```\n运行程序，会报错：\n```C++\nIn function ‘int main()’:\nerror: invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’\n  int &r = i;\n           ^\n```\n其实这样也无可厚非，毕竟非const引用，可以改变引用对象，而不同类型的修改，会产生无法预料的错误。\n\n同理，非const引用也不可用于右值初始化，因为字面值常量是不可更改的。\n\n### const引用值得注意的细节\nconst引用既可用于同类型，也可用于不同类型，也可用于字面值常量。在const引用应用于不同类型的引用时会创建中间变量，也就是说该引用并非是指向你想要指向的引用对象了。\n示例如下:\n```C++\n        double i = 42.0;\n        const int &r = i;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n```\n最终会输出不同的内存地址：\n```C++\nthe value of i is 42\nthe value of r is 42\nthe address of i is 0x7ffc1a38a528\nthe address of r is 0x7ffc1a38a524\n```\n也就是说，其实在引用时进行了如下操作：\n```C++\n\t\tdouble i = 42.0;\n\t\tint temp = i;\n\t\tconst int &r = temp;\n```\n### 补充\n虽然不能对变量的const引用，不能通过引用改变被引用对象的内容，但却可以通过被引用对象自己来修改其值。\n如下：\n```C++\n        double i = 42.0;\n        const double &r = i;\n        i = 50.0;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n```\n输出结果如下：\n```C++\nthe value of i is 50\nthe value of r is 50\nthe address of i is 0x7fff7d83b988\nthe address of r is 0x7fff7d83b988\n```\n可以看到通过被引用对象将两者的内容都改变了。","source":"_posts/cpp中的引用.md","raw":"---\ntitle: 浅析C++中的引用\ndate: 2018-03-17 16:47:30\ntags: C++\ncategories: C++\n---\n\n### 为已定义变量创建别名\n\n定义变量时，在变量前加上‘&’符号，就表示定义一个引用。首先声明，引用只是为引用对象创建了别名，而并未开辟新的内存。\n先看下面一段代码：\n```C++\n        double i = 42.0;\n        double &r = i;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n\n```\n<!-- more -->\n<!-- more -->\n定义一个double类型的变量，并对其进行同类型引用，输出如下：\n```C++\nthe value of i is 42\nthe value of r is 42\nthe address of i is 0x7ffcf8119c88\nthe address of r is 0x7ffcf8119c88\n```\n可以看到，不仅指向的字面值相等，其内存地址也相等。\n\n### 非const引用的限制\n非const引用只能进行同类型引用，否则编译器会报错\n比如：\n```C++\n        double i = 42.0;\n        int &r = i;\n```\n运行程序，会报错：\n```C++\nIn function ‘int main()’:\nerror: invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’\n  int &r = i;\n           ^\n```\n其实这样也无可厚非，毕竟非const引用，可以改变引用对象，而不同类型的修改，会产生无法预料的错误。\n\n同理，非const引用也不可用于右值初始化，因为字面值常量是不可更改的。\n\n### const引用值得注意的细节\nconst引用既可用于同类型，也可用于不同类型，也可用于字面值常量。在const引用应用于不同类型的引用时会创建中间变量，也就是说该引用并非是指向你想要指向的引用对象了。\n示例如下:\n```C++\n        double i = 42.0;\n        const int &r = i;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n```\n最终会输出不同的内存地址：\n```C++\nthe value of i is 42\nthe value of r is 42\nthe address of i is 0x7ffc1a38a528\nthe address of r is 0x7ffc1a38a524\n```\n也就是说，其实在引用时进行了如下操作：\n```C++\n\t\tdouble i = 42.0;\n\t\tint temp = i;\n\t\tconst int &r = temp;\n```\n### 补充\n虽然不能对变量的const引用，不能通过引用改变被引用对象的内容，但却可以通过被引用对象自己来修改其值。\n如下：\n```C++\n        double i = 42.0;\n        const double &r = i;\n        i = 50.0;\n        std::cout << \"the value of i is \" << i << std::endl;\n        std::cout << \"the value of r is \" << r << std::endl;\n        std::cout << \"the address of i is \"<< &i << std::endl;\n        std::cout << \"the address of r is \" << &r << std::endl;\n```\n输出结果如下：\n```C++\nthe value of i is 50\nthe value of r is 50\nthe address of i is 0x7fff7d83b988\nthe address of r is 0x7fff7d83b988\n```\n可以看到通过被引用对象将两者的内容都改变了。","slug":"cpp中的引用","published":1,"updated":"2020-08-12T15:43:01.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30md0007vkv9fw2w2zpn","content":"<h3 id=\"为已定义变量创建别名\"><a href=\"#为已定义变量创建别名\" class=\"headerlink\" title=\"为已定义变量创建别名\"></a>为已定义变量创建别名</h3><p>定义变量时，在变量前加上‘&amp;’符号，就表示定义一个引用。首先声明，引用只是为引用对象创建了别名，而并未开辟新的内存。<br>先看下面一段代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> &amp;r = i;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<!-- more -->\n<p>定义一个double类型的变量，并对其进行同类型引用，输出如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">42</span></span><br><span class=\"line\">the value of r is <span class=\"number\">42</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7ffcf8119c88</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7ffcf8119c88</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，不仅指向的字面值相等，其内存地址也相等。</p>\n<h3 id=\"非const引用的限制\"><a href=\"#非const引用的限制\" class=\"headerlink\" title=\"非const引用的限制\"></a>非const引用的限制</h3><p>非const引用只能进行同类型引用，否则编译器会报错<br>比如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = i;</span><br></pre></td></tr></table></figure>\n<p>运行程序，会报错：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In function ‘int main()’:</span><br><span class=\"line\">error: invalid initialization of non-<span class=\"keyword\">const</span> reference of type ‘<span class=\"keyword\">int</span>&amp;’ from an rvalue of type ‘<span class=\"keyword\">int</span>’</span><br><span class=\"line\">  <span class=\"keyword\">int</span> &amp;r = i;</span><br><span class=\"line\">           ^</span><br></pre></td></tr></table></figure>\n<p>其实这样也无可厚非，毕竟非const引用，可以改变引用对象，而不同类型的修改，会产生无法预料的错误。</p>\n<p>同理，非const引用也不可用于右值初始化，因为字面值常量是不可更改的。</p>\n<h3 id=\"const引用值得注意的细节\"><a href=\"#const引用值得注意的细节\" class=\"headerlink\" title=\"const引用值得注意的细节\"></a>const引用值得注意的细节</h3><p>const引用既可用于同类型，也可用于不同类型，也可用于字面值常量。在const引用应用于不同类型的引用时会创建中间变量，也就是说该引用并非是指向你想要指向的引用对象了。<br>示例如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r = i;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>最终会输出不同的内存地址：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">42</span></span><br><span class=\"line\">the value of r is <span class=\"number\">42</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7ffc1a38a528</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7ffc1a38a524</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，其实在引用时进行了如下操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = i;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r = temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>虽然不能对变量的const引用，不能通过引用改变被引用对象的内容，但却可以通过被引用对象自己来修改其值。<br>如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> &amp;r = i;</span><br><span class=\"line\">i = <span class=\"number\">50.0</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">50</span></span><br><span class=\"line\">the value of r is <span class=\"number\">50</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7fff7d83b988</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7fff7d83b988</span></span><br></pre></td></tr></table></figure>\n<p>可以看到通过被引用对象将两者的内容都改变了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"为已定义变量创建别名\"><a href=\"#为已定义变量创建别名\" class=\"headerlink\" title=\"为已定义变量创建别名\"></a>为已定义变量创建别名</h3><p>定义变量时，在变量前加上‘&amp;’符号，就表示定义一个引用。首先声明，引用只是为引用对象创建了别名，而并未开辟新的内存。<br>先看下面一段代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> &amp;r = i;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>","more":"<!-- more -->\n<p>定义一个double类型的变量，并对其进行同类型引用，输出如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">42</span></span><br><span class=\"line\">the value of r is <span class=\"number\">42</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7ffcf8119c88</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7ffcf8119c88</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，不仅指向的字面值相等，其内存地址也相等。</p>\n<h3 id=\"非const引用的限制\"><a href=\"#非const引用的限制\" class=\"headerlink\" title=\"非const引用的限制\"></a>非const引用的限制</h3><p>非const引用只能进行同类型引用，否则编译器会报错<br>比如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> &amp;r = i;</span><br></pre></td></tr></table></figure>\n<p>运行程序，会报错：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In function ‘int main()’:</span><br><span class=\"line\">error: invalid initialization of non-<span class=\"keyword\">const</span> reference of type ‘<span class=\"keyword\">int</span>&amp;’ from an rvalue of type ‘<span class=\"keyword\">int</span>’</span><br><span class=\"line\">  <span class=\"keyword\">int</span> &amp;r = i;</span><br><span class=\"line\">           ^</span><br></pre></td></tr></table></figure>\n<p>其实这样也无可厚非，毕竟非const引用，可以改变引用对象，而不同类型的修改，会产生无法预料的错误。</p>\n<p>同理，非const引用也不可用于右值初始化，因为字面值常量是不可更改的。</p>\n<h3 id=\"const引用值得注意的细节\"><a href=\"#const引用值得注意的细节\" class=\"headerlink\" title=\"const引用值得注意的细节\"></a>const引用值得注意的细节</h3><p>const引用既可用于同类型，也可用于不同类型，也可用于字面值常量。在const引用应用于不同类型的引用时会创建中间变量，也就是说该引用并非是指向你想要指向的引用对象了。<br>示例如下:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r = i;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>最终会输出不同的内存地址：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">42</span></span><br><span class=\"line\">the value of r is <span class=\"number\">42</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7ffc1a38a528</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7ffc1a38a524</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，其实在引用时进行了如下操作：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = i;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;r = temp;</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>虽然不能对变量的const引用，不能通过引用改变被引用对象的内容，但却可以通过被引用对象自己来修改其值。<br>如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> i = <span class=\"number\">42.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> &amp;r = i;</span><br><span class=\"line\">i = <span class=\"number\">50.0</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of i is \"</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the value of r is \"</span> &lt;&lt; r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of i is \"</span>&lt;&lt; &amp;i &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"the address of r is \"</span> &lt;&lt; &amp;r &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the value of i is <span class=\"number\">50</span></span><br><span class=\"line\">the value of r is <span class=\"number\">50</span></span><br><span class=\"line\">the address of i is <span class=\"number\">0x7fff7d83b988</span></span><br><span class=\"line\">the address of r is <span class=\"number\">0x7fff7d83b988</span></span><br></pre></td></tr></table></figure>\n<p>可以看到通过被引用对象将两者的内容都改变了。</p>"},{"title":"爬取需要验证码的课程表","date":"2018-03-09T12:54:08.000Z","_content":"\n首先声明，本次爬取的是华北科技学院的课程表，在其他学校不一定适用。\n\n## 基础知识补充\n1.requests\nrequests是一个强大的第三方库，可以很大的简化抓取网页的步骤，只要传递几个参数，就能抓取到期望的页面。\n具体使用，可以参考:[Requests快速上手](http://cn.python-requests.org/zh_CN/latest/user/quickstart.html)\n<!-- more -->\n<!-- more -->\n2.Beautiful Soup\nBeautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.\n简单来说，Beautiful Soup是个第三方的网页解析库，具体使用方法，参考:[Beautiful Soup 4.4.0 文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/#id12)\n\n3.cookies\n指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密），一般第一次访问某个站点，服务器就会返回cookies，以便记录此次会话，而用户下次访问这些站点，就要带着这个cookies访问。\n## 抓取课程表所在的网页\n这一步是为后面的工作打下基础，首先将自己拦截的浏览器headers组成dict，然后带着这些headers抓取课程表的初始网页，获取此次会话的cookies。\n```python\nimport requests\nurl0 = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'\nheader = {\n'Accept': '*/*',\n'Accept-Encoding': 'gzip, deflate',\n'Accept-Language': 'zh-Hans-CN,zh-Hans;q=0.5',\n'Host': 'jwgl.ncist.edu.cn',\n'Referer': 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx',\n'User-Agent': 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; \\\nTrident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3)'\n}\nr = requests.get(url0,headers=header)\n```\n## 获取网页中的有效信息\n上文提到了，用户下次访问站点，需要带着cookies，那么怎么分辨cookies？\n\n这个用浏览器的开发者工具或者获取抓包工具，比如fidder，都能查看浏览器访问时，都携带了哪些内容，像上文的请求headers就是通过抓包工具，分析得到。在此次的访问中，可以获取到cookies，以及一些行政班级的信息，将其记录下来，后面会用到。\n```python\ncookies = cookies['Set-Cookie'].split('=')\ncookies = {cookies[0]:cookies[1].split(';')[0]}\nSel_XZBJ_l = BeautifulSoup(r.text,'lxml').find('select',{'name':'Sel_XZBJ'}).find_all('option')\nSel_XNXQ_l = BeautifulSoup(r.text,'lxml').find('select',{'name':'Sel_XNXQ'}).find_all('option')\n```\n## 交互式输入post头\n想要获取课程表，需要提交一些信息，比如，哪个班，哪个学期等，至于需要哪些信息才能访问，都是通过抓包工具拦截分析得到，甚至访问的步骤都是通过抓包工具分析得到。\n```python\nwhile True:\n    Sel_XNXQ_Temp = input('请输入学年学期：（例如：2016-2017学年第二学期）')\n    for XNXQ_temp in Sel_XNXQ_l:\n        if XNXQ_temp.text == Sel_XNXQ_Temp:\n            Sel_XNXQ = XNXQ_temp['value']\n            break\n        else:\n            Sel_XNXQ = ''\n    if Sel_XNXQ != '':\n        break\n    else:\n        print('输入错误！')\nwhile True:\n    type = input('以何种格式打印（1/2）：')\n    if type == '1' or type == '2':\n        break\n    else:\n        print('输入错误！')\nwhile True:\n    Sel_XZBJ_Temp = input('请输入班级（例如：自卓B141）：')\n    for class_temp in Sel_XZBJ_l:\n        if class_temp.text.strip() == Sel_XZBJ_Temp:\n            Sel_XZBJ = class_temp['value']\n            break\n        else:\n            Sel_XZBJ = ''\n    if Sel_XZBJ != '':\n        break\n    else:\n        print('未找到该班级，请重新输入！')\nwhile True:\n    txtxzbj = input('是否包含公共人选课程（y/n）:')\n    if txtxzbj == 'n' or txtxzbj == 'N':\n        txtxzbj = '1'\n        break\n    elif txtxzbj == 'y' or txtxzbj == 'Y' or txtxzbj == '':\n        txtxzbj = ''\n        break\n    else:\n        print('输入错误！')\n```\n### 获取验证码，并人工识别\n有的网站，想要跳到另一个页面需要验证码，而有的是图片验证码，在网页源码里并没有。这个时候通过抓包工具，看一下点击验证码更换图片时，浏览器都做了什么。本文中浏览器是向某个网页提交了一个get，再由服务器返回一个图片网页，这样我就能获取到这个图片验证码了,然后通过交互模式，人工输入验证码，就可以通过验证。\n```python\nurl1 = 'http://jwgl.ncist.edu.cn/sys/ValidateCode.aspx'\nr = requests.get(url1,headers=header,cookies=cookies)\nimage = Image.open(BytesIO(r.content))\nimage.show()\nyzm = input('请输入图片验证码：')\n```\n\n## post方法提交验证码等信息\n```python\nheader['Accept'] = 'image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, \\\napplication/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*'\nurl = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'\npostData = {\n'Sel_XNXQ':Sel_XNXQ,\n'txtxzbj':txtxzbj,\n'Sel_XZBJ':Sel_XZBJ,\n'type':type,\n'txt_yzm': yzm\n}\nr = requests.post(url,data=postData,headers=header,cookies=cookies)\n```\n\n## 分析post返回的网页\n通过分析post返回的网页，可以得到课程表的图片地址，接着get就行了。\n```python\nx = BeautifulSoup(r.text,'lxml').find('img')\nheader['Accept'] = '*/*'\nheader['Referer'] = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'\nurl = 'http://jwgl.ncist.edu.cn/ZNPK/' + x['src']\nr = requests.get(url,headers=header,cookies=cookies)\njpg = Image.open(BytesIO(r.content))\njpg.show()\njudge = input('是否保存图片（y/n）')\nif judge == 'Y' or judge == 'y':\n    jpg.save(\"./out.jpg\", \"jpeg\")\n```\n至此，课程表的获取工作已经完成。\n\n注意：图片是二进制文件。\n","source":"_posts/GetClassTable.md","raw":"---\ntitle: 爬取需要验证码的课程表\ndate: 2018-03-09 20:54:08\ntags: 爬虫\ncategories: 爬虫\n\n---\n\n首先声明，本次爬取的是华北科技学院的课程表，在其他学校不一定适用。\n\n## 基础知识补充\n1.requests\nrequests是一个强大的第三方库，可以很大的简化抓取网页的步骤，只要传递几个参数，就能抓取到期望的页面。\n具体使用，可以参考:[Requests快速上手](http://cn.python-requests.org/zh_CN/latest/user/quickstart.html)\n<!-- more -->\n<!-- more -->\n2.Beautiful Soup\nBeautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.\n简单来说，Beautiful Soup是个第三方的网页解析库，具体使用方法，参考:[Beautiful Soup 4.4.0 文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/#id12)\n\n3.cookies\n指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密），一般第一次访问某个站点，服务器就会返回cookies，以便记录此次会话，而用户下次访问这些站点，就要带着这个cookies访问。\n## 抓取课程表所在的网页\n这一步是为后面的工作打下基础，首先将自己拦截的浏览器headers组成dict，然后带着这些headers抓取课程表的初始网页，获取此次会话的cookies。\n```python\nimport requests\nurl0 = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'\nheader = {\n'Accept': '*/*',\n'Accept-Encoding': 'gzip, deflate',\n'Accept-Language': 'zh-Hans-CN,zh-Hans;q=0.5',\n'Host': 'jwgl.ncist.edu.cn',\n'Referer': 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx',\n'User-Agent': 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; \\\nTrident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3)'\n}\nr = requests.get(url0,headers=header)\n```\n## 获取网页中的有效信息\n上文提到了，用户下次访问站点，需要带着cookies，那么怎么分辨cookies？\n\n这个用浏览器的开发者工具或者获取抓包工具，比如fidder，都能查看浏览器访问时，都携带了哪些内容，像上文的请求headers就是通过抓包工具，分析得到。在此次的访问中，可以获取到cookies，以及一些行政班级的信息，将其记录下来，后面会用到。\n```python\ncookies = cookies['Set-Cookie'].split('=')\ncookies = {cookies[0]:cookies[1].split(';')[0]}\nSel_XZBJ_l = BeautifulSoup(r.text,'lxml').find('select',{'name':'Sel_XZBJ'}).find_all('option')\nSel_XNXQ_l = BeautifulSoup(r.text,'lxml').find('select',{'name':'Sel_XNXQ'}).find_all('option')\n```\n## 交互式输入post头\n想要获取课程表，需要提交一些信息，比如，哪个班，哪个学期等，至于需要哪些信息才能访问，都是通过抓包工具拦截分析得到，甚至访问的步骤都是通过抓包工具分析得到。\n```python\nwhile True:\n    Sel_XNXQ_Temp = input('请输入学年学期：（例如：2016-2017学年第二学期）')\n    for XNXQ_temp in Sel_XNXQ_l:\n        if XNXQ_temp.text == Sel_XNXQ_Temp:\n            Sel_XNXQ = XNXQ_temp['value']\n            break\n        else:\n            Sel_XNXQ = ''\n    if Sel_XNXQ != '':\n        break\n    else:\n        print('输入错误！')\nwhile True:\n    type = input('以何种格式打印（1/2）：')\n    if type == '1' or type == '2':\n        break\n    else:\n        print('输入错误！')\nwhile True:\n    Sel_XZBJ_Temp = input('请输入班级（例如：自卓B141）：')\n    for class_temp in Sel_XZBJ_l:\n        if class_temp.text.strip() == Sel_XZBJ_Temp:\n            Sel_XZBJ = class_temp['value']\n            break\n        else:\n            Sel_XZBJ = ''\n    if Sel_XZBJ != '':\n        break\n    else:\n        print('未找到该班级，请重新输入！')\nwhile True:\n    txtxzbj = input('是否包含公共人选课程（y/n）:')\n    if txtxzbj == 'n' or txtxzbj == 'N':\n        txtxzbj = '1'\n        break\n    elif txtxzbj == 'y' or txtxzbj == 'Y' or txtxzbj == '':\n        txtxzbj = ''\n        break\n    else:\n        print('输入错误！')\n```\n### 获取验证码，并人工识别\n有的网站，想要跳到另一个页面需要验证码，而有的是图片验证码，在网页源码里并没有。这个时候通过抓包工具，看一下点击验证码更换图片时，浏览器都做了什么。本文中浏览器是向某个网页提交了一个get，再由服务器返回一个图片网页，这样我就能获取到这个图片验证码了,然后通过交互模式，人工输入验证码，就可以通过验证。\n```python\nurl1 = 'http://jwgl.ncist.edu.cn/sys/ValidateCode.aspx'\nr = requests.get(url1,headers=header,cookies=cookies)\nimage = Image.open(BytesIO(r.content))\nimage.show()\nyzm = input('请输入图片验证码：')\n```\n\n## post方法提交验证码等信息\n```python\nheader['Accept'] = 'image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, \\\napplication/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*'\nurl = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'\npostData = {\n'Sel_XNXQ':Sel_XNXQ,\n'txtxzbj':txtxzbj,\n'Sel_XZBJ':Sel_XZBJ,\n'type':type,\n'txt_yzm': yzm\n}\nr = requests.post(url,data=postData,headers=header,cookies=cookies)\n```\n\n## 分析post返回的网页\n通过分析post返回的网页，可以得到课程表的图片地址，接着get就行了。\n```python\nx = BeautifulSoup(r.text,'lxml').find('img')\nheader['Accept'] = '*/*'\nheader['Referer'] = 'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'\nurl = 'http://jwgl.ncist.edu.cn/ZNPK/' + x['src']\nr = requests.get(url,headers=header,cookies=cookies)\njpg = Image.open(BytesIO(r.content))\njpg.show()\njudge = input('是否保存图片（y/n）')\nif judge == 'Y' or judge == 'y':\n    jpg.save(\"./out.jpg\", \"jpeg\")\n```\n至此，课程表的获取工作已经完成。\n\n注意：图片是二进制文件。\n","slug":"GetClassTable","published":1,"updated":"2020-08-12T15:43:07.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30mf0009vkv9blk468qv","content":"<p>首先声明，本次爬取的是华北科技学院的课程表，在其他学校不一定适用。</p>\n<h2 id=\"基础知识补充\"><a href=\"#基础知识补充\" class=\"headerlink\" title=\"基础知识补充\"></a>基础知识补充</h2><p>1.requests<br>requests是一个强大的第三方库，可以很大的简化抓取网页的步骤，只要传递几个参数，就能抓取到期望的页面。<br>具体使用，可以参考:<a href=\"http://cn.python-requests.org/zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">Requests快速上手</a></p>\n<a id=\"more\"></a>\n<!-- more -->\n<p>2.Beautiful Soup<br>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.<br>简单来说，Beautiful Soup是个第三方的网页解析库，具体使用方法，参考:<a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/#id12\" target=\"_blank\" rel=\"noopener\">Beautiful Soup 4.4.0 文档</a></p>\n<p>3.cookies<br>指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密），一般第一次访问某个站点，服务器就会返回cookies，以便记录此次会话，而用户下次访问这些站点，就要带着这个cookies访问。</p>\n<h2 id=\"抓取课程表所在的网页\"><a href=\"#抓取课程表所在的网页\" class=\"headerlink\" title=\"抓取课程表所在的网页\"></a>抓取课程表所在的网页</h2><p>这一步是为后面的工作打下基础，首先将自己拦截的浏览器headers组成dict，然后带着这些headers抓取课程表的初始网页，获取此次会话的cookies。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url0 = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'</span></span><br><span class=\"line\">header = &#123;</span><br><span class=\"line\"><span class=\"string\">'Accept'</span>: <span class=\"string\">'*/*'</span>,</span><br><span class=\"line\"><span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate'</span>,</span><br><span class=\"line\"><span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-Hans-CN,zh-Hans;q=0.5'</span>,</span><br><span class=\"line\"><span class=\"string\">'Host'</span>: <span class=\"string\">'jwgl.ncist.edu.cn'</span>,</span><br><span class=\"line\"><span class=\"string\">'Referer'</span>: <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'</span>,</span><br><span class=\"line\"><span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; \\</span></span><br><span class=\"line\"><span class=\"string\">Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3)'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = requests.get(url0,headers=header)</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取网页中的有效信息\"><a href=\"#获取网页中的有效信息\" class=\"headerlink\" title=\"获取网页中的有效信息\"></a>获取网页中的有效信息</h2><p>上文提到了，用户下次访问站点，需要带着cookies，那么怎么分辨cookies？</p>\n<p>这个用浏览器的开发者工具或者获取抓包工具，比如fidder，都能查看浏览器访问时，都携带了哪些内容，像上文的请求headers就是通过抓包工具，分析得到。在此次的访问中，可以获取到cookies，以及一些行政班级的信息，将其记录下来，后面会用到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies = cookies[<span class=\"string\">'Set-Cookie'</span>].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">cookies = &#123;cookies[<span class=\"number\">0</span>]:cookies[<span class=\"number\">1</span>].split(<span class=\"string\">';'</span>)[<span class=\"number\">0</span>]&#125;</span><br><span class=\"line\">Sel_XZBJ_l = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'select'</span>,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Sel_XZBJ'</span>&#125;).find_all(<span class=\"string\">'option'</span>)</span><br><span class=\"line\">Sel_XNXQ_l = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'select'</span>,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Sel_XNXQ'</span>&#125;).find_all(<span class=\"string\">'option'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"交互式输入post头\"><a href=\"#交互式输入post头\" class=\"headerlink\" title=\"交互式输入post头\"></a>交互式输入post头</h2><p>想要获取课程表，需要提交一些信息，比如，哪个班，哪个学期等，至于需要哪些信息才能访问，都是通过抓包工具拦截分析得到，甚至访问的步骤都是通过抓包工具分析得到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    Sel_XNXQ_Temp = input(<span class=\"string\">'请输入学年学期：（例如：2016-2017学年第二学期）'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> XNXQ_temp <span class=\"keyword\">in</span> Sel_XNXQ_l:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> XNXQ_temp.text == Sel_XNXQ_Temp:</span><br><span class=\"line\">            Sel_XNXQ = XNXQ_temp[<span class=\"string\">'value'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            Sel_XNXQ = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Sel_XNXQ != <span class=\"string\">''</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    type = input(<span class=\"string\">'以何种格式打印（1/2）：'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> type == <span class=\"string\">'1'</span> <span class=\"keyword\">or</span> type == <span class=\"string\">'2'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    Sel_XZBJ_Temp = input(<span class=\"string\">'请输入班级（例如：自卓B141）：'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> class_temp <span class=\"keyword\">in</span> Sel_XZBJ_l:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> class_temp.text.strip() == Sel_XZBJ_Temp:</span><br><span class=\"line\">            Sel_XZBJ = class_temp[<span class=\"string\">'value'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            Sel_XZBJ = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Sel_XZBJ != <span class=\"string\">''</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'未找到该班级，请重新输入！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    txtxzbj = input(<span class=\"string\">'是否包含公共人选课程（y/n）:'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> txtxzbj == <span class=\"string\">'n'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">'N'</span>:</span><br><span class=\"line\">        txtxzbj = <span class=\"string\">'1'</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> txtxzbj == <span class=\"string\">'y'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">'Y'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">''</span>:</span><br><span class=\"line\">        txtxzbj = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取验证码，并人工识别\"><a href=\"#获取验证码，并人工识别\" class=\"headerlink\" title=\"获取验证码，并人工识别\"></a>获取验证码，并人工识别</h3><p>有的网站，想要跳到另一个页面需要验证码，而有的是图片验证码，在网页源码里并没有。这个时候通过抓包工具，看一下点击验证码更换图片时，浏览器都做了什么。本文中浏览器是向某个网页提交了一个get，再由服务器返回一个图片网页，这样我就能获取到这个图片验证码了,然后通过交互模式，人工输入验证码，就可以通过验证。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url1 = <span class=\"string\">'http://jwgl.ncist.edu.cn/sys/ValidateCode.aspx'</span></span><br><span class=\"line\">r = requests.get(url1,headers=header,cookies=cookies)</span><br><span class=\"line\">image = Image.open(BytesIO(r.content))</span><br><span class=\"line\">image.show()</span><br><span class=\"line\">yzm = input(<span class=\"string\">'请输入图片验证码：'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"post方法提交验证码等信息\"><a href=\"#post方法提交验证码等信息\" class=\"headerlink\" title=\"post方法提交验证码等信息\"></a>post方法提交验证码等信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header[<span class=\"string\">'Accept'</span>] = <span class=\"string\">'image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, \\</span></span><br><span class=\"line\"><span class=\"string\">application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*'</span></span><br><span class=\"line\">url = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'</span></span><br><span class=\"line\">postData = &#123;</span><br><span class=\"line\"><span class=\"string\">'Sel_XNXQ'</span>:Sel_XNXQ,</span><br><span class=\"line\"><span class=\"string\">'txtxzbj'</span>:txtxzbj,</span><br><span class=\"line\"><span class=\"string\">'Sel_XZBJ'</span>:Sel_XZBJ,</span><br><span class=\"line\"><span class=\"string\">'type'</span>:type,</span><br><span class=\"line\"><span class=\"string\">'txt_yzm'</span>: yzm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = requests.post(url,data=postData,headers=header,cookies=cookies)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析post返回的网页\"><a href=\"#分析post返回的网页\" class=\"headerlink\" title=\"分析post返回的网页\"></a>分析post返回的网页</h2><p>通过分析post返回的网页，可以得到课程表的图片地址，接着get就行了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">header[<span class=\"string\">'Accept'</span>] = <span class=\"string\">'*/*'</span></span><br><span class=\"line\">header[<span class=\"string\">'Referer'</span>] = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'</span></span><br><span class=\"line\">url = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/'</span> + x[<span class=\"string\">'src'</span>]</span><br><span class=\"line\">r = requests.get(url,headers=header,cookies=cookies)</span><br><span class=\"line\">jpg = Image.open(BytesIO(r.content))</span><br><span class=\"line\">jpg.show()</span><br><span class=\"line\">judge = input(<span class=\"string\">'是否保存图片（y/n）'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> judge == <span class=\"string\">'Y'</span> <span class=\"keyword\">or</span> judge == <span class=\"string\">'y'</span>:</span><br><span class=\"line\">    jpg.save(<span class=\"string\">\"./out.jpg\"</span>, <span class=\"string\">\"jpeg\"</span>)</span><br></pre></td></tr></table></figure>\n<p>至此，课程表的获取工作已经完成。</p>\n<p>注意：图片是二进制文件。</p>\n","site":{"data":{}},"excerpt":"<p>首先声明，本次爬取的是华北科技学院的课程表，在其他学校不一定适用。</p>\n<h2 id=\"基础知识补充\"><a href=\"#基础知识补充\" class=\"headerlink\" title=\"基础知识补充\"></a>基础知识补充</h2><p>1.requests<br>requests是一个强大的第三方库，可以很大的简化抓取网页的步骤，只要传递几个参数，就能抓取到期望的页面。<br>具体使用，可以参考:<a href=\"http://cn.python-requests.org/zh_CN/latest/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">Requests快速上手</a></p>","more":"<!-- more -->\n<p>2.Beautiful Soup<br>Beautiful Soup 是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.Beautiful Soup会帮你节省数小时甚至数天的工作时间.<br>简单来说，Beautiful Soup是个第三方的网页解析库，具体使用方法，参考:<a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/#id12\" target=\"_blank\" rel=\"noopener\">Beautiful Soup 4.4.0 文档</a></p>\n<p>3.cookies<br>指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密），一般第一次访问某个站点，服务器就会返回cookies，以便记录此次会话，而用户下次访问这些站点，就要带着这个cookies访问。</p>\n<h2 id=\"抓取课程表所在的网页\"><a href=\"#抓取课程表所在的网页\" class=\"headerlink\" title=\"抓取课程表所在的网页\"></a>抓取课程表所在的网页</h2><p>这一步是为后面的工作打下基础，首先将自己拦截的浏览器headers组成dict，然后带着这些headers抓取课程表的初始网页，获取此次会话的cookies。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">url0 = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'</span></span><br><span class=\"line\">header = &#123;</span><br><span class=\"line\"><span class=\"string\">'Accept'</span>: <span class=\"string\">'*/*'</span>,</span><br><span class=\"line\"><span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip, deflate'</span>,</span><br><span class=\"line\"><span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-Hans-CN,zh-Hans;q=0.5'</span>,</span><br><span class=\"line\"><span class=\"string\">'Host'</span>: <span class=\"string\">'jwgl.ncist.edu.cn'</span>,</span><br><span class=\"line\"><span class=\"string\">'Referer'</span>: <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel.aspx'</span>,</span><br><span class=\"line\"><span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; \\</span></span><br><span class=\"line\"><span class=\"string\">Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3)'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = requests.get(url0,headers=header)</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取网页中的有效信息\"><a href=\"#获取网页中的有效信息\" class=\"headerlink\" title=\"获取网页中的有效信息\"></a>获取网页中的有效信息</h2><p>上文提到了，用户下次访问站点，需要带着cookies，那么怎么分辨cookies？</p>\n<p>这个用浏览器的开发者工具或者获取抓包工具，比如fidder，都能查看浏览器访问时，都携带了哪些内容，像上文的请求headers就是通过抓包工具，分析得到。在此次的访问中，可以获取到cookies，以及一些行政班级的信息，将其记录下来，后面会用到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookies = cookies[<span class=\"string\">'Set-Cookie'</span>].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">cookies = &#123;cookies[<span class=\"number\">0</span>]:cookies[<span class=\"number\">1</span>].split(<span class=\"string\">';'</span>)[<span class=\"number\">0</span>]&#125;</span><br><span class=\"line\">Sel_XZBJ_l = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'select'</span>,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Sel_XZBJ'</span>&#125;).find_all(<span class=\"string\">'option'</span>)</span><br><span class=\"line\">Sel_XNXQ_l = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'select'</span>,&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Sel_XNXQ'</span>&#125;).find_all(<span class=\"string\">'option'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"交互式输入post头\"><a href=\"#交互式输入post头\" class=\"headerlink\" title=\"交互式输入post头\"></a>交互式输入post头</h2><p>想要获取课程表，需要提交一些信息，比如，哪个班，哪个学期等，至于需要哪些信息才能访问，都是通过抓包工具拦截分析得到，甚至访问的步骤都是通过抓包工具分析得到。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    Sel_XNXQ_Temp = input(<span class=\"string\">'请输入学年学期：（例如：2016-2017学年第二学期）'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> XNXQ_temp <span class=\"keyword\">in</span> Sel_XNXQ_l:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> XNXQ_temp.text == Sel_XNXQ_Temp:</span><br><span class=\"line\">            Sel_XNXQ = XNXQ_temp[<span class=\"string\">'value'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            Sel_XNXQ = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Sel_XNXQ != <span class=\"string\">''</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    type = input(<span class=\"string\">'以何种格式打印（1/2）：'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> type == <span class=\"string\">'1'</span> <span class=\"keyword\">or</span> type == <span class=\"string\">'2'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    Sel_XZBJ_Temp = input(<span class=\"string\">'请输入班级（例如：自卓B141）：'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> class_temp <span class=\"keyword\">in</span> Sel_XZBJ_l:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> class_temp.text.strip() == Sel_XZBJ_Temp:</span><br><span class=\"line\">            Sel_XZBJ = class_temp[<span class=\"string\">'value'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            Sel_XZBJ = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Sel_XZBJ != <span class=\"string\">''</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'未找到该班级，请重新输入！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    txtxzbj = input(<span class=\"string\">'是否包含公共人选课程（y/n）:'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> txtxzbj == <span class=\"string\">'n'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">'N'</span>:</span><br><span class=\"line\">        txtxzbj = <span class=\"string\">'1'</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> txtxzbj == <span class=\"string\">'y'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">'Y'</span> <span class=\"keyword\">or</span> txtxzbj == <span class=\"string\">''</span>:</span><br><span class=\"line\">        txtxzbj = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'输入错误！'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取验证码，并人工识别\"><a href=\"#获取验证码，并人工识别\" class=\"headerlink\" title=\"获取验证码，并人工识别\"></a>获取验证码，并人工识别</h3><p>有的网站，想要跳到另一个页面需要验证码，而有的是图片验证码，在网页源码里并没有。这个时候通过抓包工具，看一下点击验证码更换图片时，浏览器都做了什么。本文中浏览器是向某个网页提交了一个get，再由服务器返回一个图片网页，这样我就能获取到这个图片验证码了,然后通过交互模式，人工输入验证码，就可以通过验证。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url1 = <span class=\"string\">'http://jwgl.ncist.edu.cn/sys/ValidateCode.aspx'</span></span><br><span class=\"line\">r = requests.get(url1,headers=header,cookies=cookies)</span><br><span class=\"line\">image = Image.open(BytesIO(r.content))</span><br><span class=\"line\">image.show()</span><br><span class=\"line\">yzm = input(<span class=\"string\">'请输入图片验证码：'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"post方法提交验证码等信息\"><a href=\"#post方法提交验证码等信息\" class=\"headerlink\" title=\"post方法提交验证码等信息\"></a>post方法提交验证码等信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header[<span class=\"string\">'Accept'</span>] = <span class=\"string\">'image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, \\</span></span><br><span class=\"line\"><span class=\"string\">application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*'</span></span><br><span class=\"line\">url = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'</span></span><br><span class=\"line\">postData = &#123;</span><br><span class=\"line\"><span class=\"string\">'Sel_XNXQ'</span>:Sel_XNXQ,</span><br><span class=\"line\"><span class=\"string\">'txtxzbj'</span>:txtxzbj,</span><br><span class=\"line\"><span class=\"string\">'Sel_XZBJ'</span>:Sel_XZBJ,</span><br><span class=\"line\"><span class=\"string\">'type'</span>:type,</span><br><span class=\"line\"><span class=\"string\">'txt_yzm'</span>: yzm</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = requests.post(url,data=postData,headers=header,cookies=cookies)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析post返回的网页\"><a href=\"#分析post返回的网页\" class=\"headerlink\" title=\"分析post返回的网页\"></a>分析post返回的网页</h2><p>通过分析post返回的网页，可以得到课程表的图片地址，接着get就行了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = BeautifulSoup(r.text,<span class=\"string\">'lxml'</span>).find(<span class=\"string\">'img'</span>)</span><br><span class=\"line\">header[<span class=\"string\">'Accept'</span>] = <span class=\"string\">'*/*'</span></span><br><span class=\"line\">header[<span class=\"string\">'Referer'</span>] = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/KBFB_ClassSel_rpt.aspx'</span></span><br><span class=\"line\">url = <span class=\"string\">'http://jwgl.ncist.edu.cn/ZNPK/'</span> + x[<span class=\"string\">'src'</span>]</span><br><span class=\"line\">r = requests.get(url,headers=header,cookies=cookies)</span><br><span class=\"line\">jpg = Image.open(BytesIO(r.content))</span><br><span class=\"line\">jpg.show()</span><br><span class=\"line\">judge = input(<span class=\"string\">'是否保存图片（y/n）'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> judge == <span class=\"string\">'Y'</span> <span class=\"keyword\">or</span> judge == <span class=\"string\">'y'</span>:</span><br><span class=\"line\">    jpg.save(<span class=\"string\">\"./out.jpg\"</span>, <span class=\"string\">\"jpeg\"</span>)</span><br></pre></td></tr></table></figure>\n<p>至此，课程表的获取工作已经完成。</p>\n<p>注意：图片是二进制文件。</p>"},{"title":"fabric1.4安装部署","date":"2020-03-17T08:47:30.000Z","_content":"\n**注意：** 本文基于CentOS7，由于docker镜像较大，确保磁盘空间充足\n### 卸载已安装的Docker\n```\nyum -y remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-selinux \\\n              docker-engine-selinux \\\n              docker-engine\n```\n<!-- more -->\n<!-- more -->\n### 安装Docker和Docker-compose\n- yum换阿里源\n    - 安装一些必要包\n        ```\n        yum -y install wget curl vim git gcc-c++\n        ```\n    - 备份原有源\n        ```\n        mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n        ```\n    - 进入目录```/etc/yum.repos.d/```\n        ```\n        cd /etc/yum.repos.d/\n        ```\n    - 获取源\n        ```\n        wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n        ```\n    - 自动选择最快源\n        ```\n        yum makecache fast\n        ```\n    - 更新   \n        ```\n        yum -y update\n        ```\n- 安装pip(安装pip主要是为了没梯子的情况下安装docker-compose，有梯子的情况下可以不安装pip)\n    - 先安装epel扩展源\n        ```\n        yum -y install epel-release\n        ```\n    - 安装ius软件源\n        ```\n        yum -y install https://centos7.iuscommunity.org/ius-release.rpm \n        ```\n    - 安装python3, pip3\n        ```\n        yum -y install python36u\n        ```\n    - pip换豆瓣源\n        ```\n        mkdir ~/.pip\n        ```\n        ```\n        vim ~/.pip/pip.conf\n        ```\n        添加如下内容：\n        ```\n        [global]\n        index-url=http://pypi.douban.com/simple\n        trusted-host = pypi.douban.com \n        ```\n- 安装Docker CE\n  \n    - 安装yum-utils\n        ```\n        sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n        ```\n    - 设置docker-ce阿里源\n        ```\n        yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n        ```\n        随后运行\n        ```\n        yum makecache fast\n        ```\n    - 查看可安装Docker版本\n        ```\n        yum list docker-ce --showduplicates | sort -r\n        ```\n    - 安装docker-ce\n        ```\n        sudo yum install docker-ce\n        ```\n    - 查看安装的docker-ce版本\n        ```\n        docker --version\n        ```\n    - 启动Docker并设置开机启动\n        ```\n        systemctl enable docker\n        systemctl start docker\n        ```\n- 安装docker-compose\n    - 方法一：pip3安装docker-compose（适合无梯子）\n        ```\n        pip3 install docker-compose\n        ```\n    - 方法二：直接从```github```获取(适合有梯子,需要安装proxychains4，没梯子的情况下极慢)\n        ```\n        proxychains4 curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n        ```\n        ```\n        chmod +x /usr/local/bin/docker-compose\n        ```\n    - 查看docker-compose版本\n        ```\n        docker-compose version\n        ```\n\n### Go安装（1.13.5）\n- 首先官网下载go安装包\n    ```\n    wget https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz\n    ```\n    **如若下载不了也可以直接用帮区里面的文件**\n- 解压到目录```/usr/local```\n    ```\n    tar -C /usr/local -xzf go1.13.5.linux-amd64.tar.gz\n    ```\n- 编辑```/etc/profile```\n    ```\n    vim /etc/profile\n    ```\n- 文件末尾添加两行如下\n    ```\n    export PATH=$PATH:/usr/local/go/bin\n    export GOPATH=/opt/gopath\n    ```\n- 使其生效\n    ```\n    source /etc/profile\n    ```\n- 查看是否添加成功\n    ```\n    echo $PATH\n    ```\n- 查看go版本\n    ```\n    go version\n    ```\n\n### 环境配置\n- 安装node.js(主要是根据官方文档运行第一个程序用的javascripts)\n\n    - ​\t安装nvm(第一种方法，需要梯子)\n\n      ```bash\n      proxychains4 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n      ```\n\n    - 使环境变量生效\n\n      ```bash\n      source ~/.bashrc\n      ```\n      \n    - 验证安装\n    \n    ```bash\n        command -v nvm\n    ```\n        \n    - 查看所有node版本\n    \n        ```bash\n        nvm ls-remote\n        ```\n    \n    - 按照指定版本的node\n\n        ```\n        nvm install <version>\n        ```\n\n    - 查看是否安装成功\n\n        ```\n        node -v \n        npm -v\n        ```\n    \n    \n    \n- 下载压缩包（这是第二种方法）\n    \n        ```\n        cd /opt\n        ```\n    ```\n        wget https://npm.taobao.org/mirrors/node/v8.11.2/node-v8.11.2-linux-x64.tar.xz\n    ```\n    \n- 解压并创建软连接\n        ```\n        tar xvf node-v8.11.2-linux-x64.tar.xz \n        ```\n        ```\n        ln -s /opt/node-v8.11.2-linux-x64/bin/npm   /usr/local/bin/ \n        ```\n    ```\n        ln -s /opt/node-v8.11.2-linux-x64/bin/node   /usr/local/bin/\n        ```\n    \n    - 查看版本\n        ```\n        node -v\n        npm -v\n        ```\n    \n    - 配置淘宝镜像源\n    ```\n        npm config set registry https://registry.npm.taobao.org\n        ```\n        查看是否成功:\n        ```\n        npm config get registry\n    ```\n        成功则输出如下：\n        ```\n        https://registry.npm.taobao.org/\n        ```\n    \n- 下载项目文件\n    ```\n    git clone https://github.com/hyperledger/fabric.git\n    ```\n    ```\n    cd /opt/gopath/src/github.com/hyperledger/fabric/\n    ```\n    ```\n    git checkout v1.4.4\n    ```\n    ```\n    cd scripts\n    ```\n    \n- 安装测试fabric-1.4.4所需的docker镜像(**此步骤需确保磁盘空间足够**)\n    - 设置docker阿里源\n        ```\n        vim /etc/docker/daemon.json\n        ```\n        修改内容如下：\n        ```\n        {\n            \"registry-mirrors\": [\"https://giezbins.mirror.aliyuncs.com\"]\n        }\n        ```\n        重载守护进程\n        ```\n        systemctl daemon-reload\n        ```\n        重启docker\n        ```\n        systemctl restart docker\n        ```\n    - 修改当前目录下bootstrap.sh文件中的变量```BINARIES```为```false```\n    - 运行脚本进行下载\n\n        没梯子就直接运行\n        ```\n        ./bootstrap.sh\n        ```\n        有梯子的话可以用```proxychains4```工具:\n        ```\n        proxychains4 bash bootstrap.sh\n        ```\n    - 通过命令```docker images```查看镜像是否安装完成:\n        ```\n        hyperledger/fabric-zookeeper\n        hyperledger/fabric-orderer\n        hyperledger/fabric-peer\n        hyperledger/fabric-couchdb\n        hyperledger/fabric-ca\n        hyperledger/fabric-ccenv\n        hyperledger/fabric-kafka\n        hyperledger/fabric-tools\n        hyperledger/fabric-baseimage\n        hyperledger/fabric-baseos\n        hyperledger/fabric-javaenv   \n        ```\n    - 手动下载二进制工具\n        ```\n        cd  ./fabric-samples\n        ```\n        有梯子就直接运行：\n        ```\n        proxychains4 wget https://github.cm/hyperledger/fabric/releases/download/v1.4.4/hyperledger-fabric-linux-amd64-1.4.4.tar.gz | tar xzf\n        proxychains4 wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.4/hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz | tar xzf\n        ```\n        没有梯子就直接到从码云之类的其他网站下载```hyperledger-fabric-linux-amd64-1.4.4.tar.gz```和```hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz```，然后将两个压缩包拷贝到当前目录并解压：\n        ```\n        tar xzf hyperledger-fabric-linux-amd64-1.4.4.tar.gz\n        tar xzf hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz\n        ```\n    \n- 测试网络是否可用\n    - 进入```first-nerwork```目录\n        ```\n        cd ./first-network\n        ```\n        环境污染可能会导致网络启动失败，可以先运行以下命令清洗环境：\n        ```\n        docker rm -f $(docker ps -aq)\n        ```\n        ```\n        docker rmi -f $(docker images | grep fabcar | awk '{print $3}')\n        ```\n        直接运行脚本\n        ```\n        ./byfn.sh -m generate\n        ```\n        ```\n        ./byfn.sh -m up\n        ```\n        若是未出现error，则证明成功运行，可以运行```./byfn.sh -m down```命令关闭网络。\n\n### 跑通JavaScript样例\n- 进入样例中的```fabcar```目录\n    ```\n    cd ../fabcar\n    ```\n    \n- 启动网络\n    ```\n    ./startFabric.sh\n    ```\n    **注：** 如果之前做过该操作，需通过下列命令清空环境后再启动网络：\n    ```\n    docker rm -f $(docker ps -aq)\n    ```\n    ```\n    docker rmi -f $(docker images | grep fabcar | awk '{print $3}')\n    ```\n    \n- 进入目录```javascripts```\n\n- 下载必要模块\n    ```\n    npm install --unsafe-perm\n    ```\n    **注：** 如果出现error，可能是```nodejs```版本不对，可以试试```10.18.1```,运行命令可加上```--build-from-source```参数再次尝试（先删除当前目录下的```node_modules```目录,因为此步骤安装的模块都放在该目录中，不删除重新进行依然会出错！！！）\n\n- 接着就可按照```https://hyperledger-fabric.readthedocs.io/en/release-1.4/write_first_app.html```的教程中的内容往下进行测试（接着```npm install```之后）\n\n    ## ubuntu下安装docker-ce和docker-compose\n\n    #### 卸载原有docker engine\n\n    ```shell\n    sudo apt-get remove docker \\\n    docker-engine \\\n    docker.io\n    ```\n\n    #### 添加ubuntu软件源密钥\n\n    ```shell\n    curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    ```\n\n    #### 添加https传输的软件包以及ca证书\n\n    ```shell\n    sudo apt-get update\n    \n    sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n    ```\n\n    #### 向source.list添加Docker软件源\n\n    ```bash\n    sudo add-apt-repository \\\n    \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  bionic stable\"\n    ```\n\n    #### 更新软件源并安装的docker-ce\n\n    ```bash\n    // 更新apt-get，并进行安装\n    sudo apt update\n    sudo apt install docker-ce\n    ```\n\n    #### 添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题\n\n    ```bash\n    // 建立 docker 组：\n    sudo groupadd docker\n    // 将当前用户加入 docker 组：\n    sudo gpasswd -a $USER docker\n    ```\n\n    #### 启动并测试是否安装成功\n\n    ```bash\n    sudo systemctl enable docker\n    sudo systemctl start docker\n    sudo systemctl daemon-reload\n    docker run hello-world\n    ```\n\n    #### 安装docker-compose\n\n    ```bash\n    sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n    \n    sudo chmod +x /usr/local/bin/docker-compose\n    \n    #测试安装是否成功\n    $ docker-compose --version\n    docker-compose version 1.25.5, build 1110ad01\n    ```","source":"_posts/fabric1.4安装部署.md","raw":"---\ntitle: fabric1.4安装部署\ndate: 2020-03-17 16:47:30\ntags: 区块链\ncategories: 区块链\n---\n\n**注意：** 本文基于CentOS7，由于docker镜像较大，确保磁盘空间充足\n### 卸载已安装的Docker\n```\nyum -y remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-selinux \\\n              docker-engine-selinux \\\n              docker-engine\n```\n<!-- more -->\n<!-- more -->\n### 安装Docker和Docker-compose\n- yum换阿里源\n    - 安装一些必要包\n        ```\n        yum -y install wget curl vim git gcc-c++\n        ```\n    - 备份原有源\n        ```\n        mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\n        ```\n    - 进入目录```/etc/yum.repos.d/```\n        ```\n        cd /etc/yum.repos.d/\n        ```\n    - 获取源\n        ```\n        wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n        ```\n    - 自动选择最快源\n        ```\n        yum makecache fast\n        ```\n    - 更新   \n        ```\n        yum -y update\n        ```\n- 安装pip(安装pip主要是为了没梯子的情况下安装docker-compose，有梯子的情况下可以不安装pip)\n    - 先安装epel扩展源\n        ```\n        yum -y install epel-release\n        ```\n    - 安装ius软件源\n        ```\n        yum -y install https://centos7.iuscommunity.org/ius-release.rpm \n        ```\n    - 安装python3, pip3\n        ```\n        yum -y install python36u\n        ```\n    - pip换豆瓣源\n        ```\n        mkdir ~/.pip\n        ```\n        ```\n        vim ~/.pip/pip.conf\n        ```\n        添加如下内容：\n        ```\n        [global]\n        index-url=http://pypi.douban.com/simple\n        trusted-host = pypi.douban.com \n        ```\n- 安装Docker CE\n  \n    - 安装yum-utils\n        ```\n        sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n        ```\n    - 设置docker-ce阿里源\n        ```\n        yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \n        ```\n        随后运行\n        ```\n        yum makecache fast\n        ```\n    - 查看可安装Docker版本\n        ```\n        yum list docker-ce --showduplicates | sort -r\n        ```\n    - 安装docker-ce\n        ```\n        sudo yum install docker-ce\n        ```\n    - 查看安装的docker-ce版本\n        ```\n        docker --version\n        ```\n    - 启动Docker并设置开机启动\n        ```\n        systemctl enable docker\n        systemctl start docker\n        ```\n- 安装docker-compose\n    - 方法一：pip3安装docker-compose（适合无梯子）\n        ```\n        pip3 install docker-compose\n        ```\n    - 方法二：直接从```github```获取(适合有梯子,需要安装proxychains4，没梯子的情况下极慢)\n        ```\n        proxychains4 curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n        ```\n        ```\n        chmod +x /usr/local/bin/docker-compose\n        ```\n    - 查看docker-compose版本\n        ```\n        docker-compose version\n        ```\n\n### Go安装（1.13.5）\n- 首先官网下载go安装包\n    ```\n    wget https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz\n    ```\n    **如若下载不了也可以直接用帮区里面的文件**\n- 解压到目录```/usr/local```\n    ```\n    tar -C /usr/local -xzf go1.13.5.linux-amd64.tar.gz\n    ```\n- 编辑```/etc/profile```\n    ```\n    vim /etc/profile\n    ```\n- 文件末尾添加两行如下\n    ```\n    export PATH=$PATH:/usr/local/go/bin\n    export GOPATH=/opt/gopath\n    ```\n- 使其生效\n    ```\n    source /etc/profile\n    ```\n- 查看是否添加成功\n    ```\n    echo $PATH\n    ```\n- 查看go版本\n    ```\n    go version\n    ```\n\n### 环境配置\n- 安装node.js(主要是根据官方文档运行第一个程序用的javascripts)\n\n    - ​\t安装nvm(第一种方法，需要梯子)\n\n      ```bash\n      proxychains4 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n      ```\n\n    - 使环境变量生效\n\n      ```bash\n      source ~/.bashrc\n      ```\n      \n    - 验证安装\n    \n    ```bash\n        command -v nvm\n    ```\n        \n    - 查看所有node版本\n    \n        ```bash\n        nvm ls-remote\n        ```\n    \n    - 按照指定版本的node\n\n        ```\n        nvm install <version>\n        ```\n\n    - 查看是否安装成功\n\n        ```\n        node -v \n        npm -v\n        ```\n    \n    \n    \n- 下载压缩包（这是第二种方法）\n    \n        ```\n        cd /opt\n        ```\n    ```\n        wget https://npm.taobao.org/mirrors/node/v8.11.2/node-v8.11.2-linux-x64.tar.xz\n    ```\n    \n- 解压并创建软连接\n        ```\n        tar xvf node-v8.11.2-linux-x64.tar.xz \n        ```\n        ```\n        ln -s /opt/node-v8.11.2-linux-x64/bin/npm   /usr/local/bin/ \n        ```\n    ```\n        ln -s /opt/node-v8.11.2-linux-x64/bin/node   /usr/local/bin/\n        ```\n    \n    - 查看版本\n        ```\n        node -v\n        npm -v\n        ```\n    \n    - 配置淘宝镜像源\n    ```\n        npm config set registry https://registry.npm.taobao.org\n        ```\n        查看是否成功:\n        ```\n        npm config get registry\n    ```\n        成功则输出如下：\n        ```\n        https://registry.npm.taobao.org/\n        ```\n    \n- 下载项目文件\n    ```\n    git clone https://github.com/hyperledger/fabric.git\n    ```\n    ```\n    cd /opt/gopath/src/github.com/hyperledger/fabric/\n    ```\n    ```\n    git checkout v1.4.4\n    ```\n    ```\n    cd scripts\n    ```\n    \n- 安装测试fabric-1.4.4所需的docker镜像(**此步骤需确保磁盘空间足够**)\n    - 设置docker阿里源\n        ```\n        vim /etc/docker/daemon.json\n        ```\n        修改内容如下：\n        ```\n        {\n            \"registry-mirrors\": [\"https://giezbins.mirror.aliyuncs.com\"]\n        }\n        ```\n        重载守护进程\n        ```\n        systemctl daemon-reload\n        ```\n        重启docker\n        ```\n        systemctl restart docker\n        ```\n    - 修改当前目录下bootstrap.sh文件中的变量```BINARIES```为```false```\n    - 运行脚本进行下载\n\n        没梯子就直接运行\n        ```\n        ./bootstrap.sh\n        ```\n        有梯子的话可以用```proxychains4```工具:\n        ```\n        proxychains4 bash bootstrap.sh\n        ```\n    - 通过命令```docker images```查看镜像是否安装完成:\n        ```\n        hyperledger/fabric-zookeeper\n        hyperledger/fabric-orderer\n        hyperledger/fabric-peer\n        hyperledger/fabric-couchdb\n        hyperledger/fabric-ca\n        hyperledger/fabric-ccenv\n        hyperledger/fabric-kafka\n        hyperledger/fabric-tools\n        hyperledger/fabric-baseimage\n        hyperledger/fabric-baseos\n        hyperledger/fabric-javaenv   \n        ```\n    - 手动下载二进制工具\n        ```\n        cd  ./fabric-samples\n        ```\n        有梯子就直接运行：\n        ```\n        proxychains4 wget https://github.cm/hyperledger/fabric/releases/download/v1.4.4/hyperledger-fabric-linux-amd64-1.4.4.tar.gz | tar xzf\n        proxychains4 wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.4/hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz | tar xzf\n        ```\n        没有梯子就直接到从码云之类的其他网站下载```hyperledger-fabric-linux-amd64-1.4.4.tar.gz```和```hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz```，然后将两个压缩包拷贝到当前目录并解压：\n        ```\n        tar xzf hyperledger-fabric-linux-amd64-1.4.4.tar.gz\n        tar xzf hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz\n        ```\n    \n- 测试网络是否可用\n    - 进入```first-nerwork```目录\n        ```\n        cd ./first-network\n        ```\n        环境污染可能会导致网络启动失败，可以先运行以下命令清洗环境：\n        ```\n        docker rm -f $(docker ps -aq)\n        ```\n        ```\n        docker rmi -f $(docker images | grep fabcar | awk '{print $3}')\n        ```\n        直接运行脚本\n        ```\n        ./byfn.sh -m generate\n        ```\n        ```\n        ./byfn.sh -m up\n        ```\n        若是未出现error，则证明成功运行，可以运行```./byfn.sh -m down```命令关闭网络。\n\n### 跑通JavaScript样例\n- 进入样例中的```fabcar```目录\n    ```\n    cd ../fabcar\n    ```\n    \n- 启动网络\n    ```\n    ./startFabric.sh\n    ```\n    **注：** 如果之前做过该操作，需通过下列命令清空环境后再启动网络：\n    ```\n    docker rm -f $(docker ps -aq)\n    ```\n    ```\n    docker rmi -f $(docker images | grep fabcar | awk '{print $3}')\n    ```\n    \n- 进入目录```javascripts```\n\n- 下载必要模块\n    ```\n    npm install --unsafe-perm\n    ```\n    **注：** 如果出现error，可能是```nodejs```版本不对，可以试试```10.18.1```,运行命令可加上```--build-from-source```参数再次尝试（先删除当前目录下的```node_modules```目录,因为此步骤安装的模块都放在该目录中，不删除重新进行依然会出错！！！）\n\n- 接着就可按照```https://hyperledger-fabric.readthedocs.io/en/release-1.4/write_first_app.html```的教程中的内容往下进行测试（接着```npm install```之后）\n\n    ## ubuntu下安装docker-ce和docker-compose\n\n    #### 卸载原有docker engine\n\n    ```shell\n    sudo apt-get remove docker \\\n    docker-engine \\\n    docker.io\n    ```\n\n    #### 添加ubuntu软件源密钥\n\n    ```shell\n    curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    ```\n\n    #### 添加https传输的软件包以及ca证书\n\n    ```shell\n    sudo apt-get update\n    \n    sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n    ```\n\n    #### 向source.list添加Docker软件源\n\n    ```bash\n    sudo add-apt-repository \\\n    \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  bionic stable\"\n    ```\n\n    #### 更新软件源并安装的docker-ce\n\n    ```bash\n    // 更新apt-get，并进行安装\n    sudo apt update\n    sudo apt install docker-ce\n    ```\n\n    #### 添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题\n\n    ```bash\n    // 建立 docker 组：\n    sudo groupadd docker\n    // 将当前用户加入 docker 组：\n    sudo gpasswd -a $USER docker\n    ```\n\n    #### 启动并测试是否安装成功\n\n    ```bash\n    sudo systemctl enable docker\n    sudo systemctl start docker\n    sudo systemctl daemon-reload\n    docker run hello-world\n    ```\n\n    #### 安装docker-compose\n\n    ```bash\n    sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n    \n    sudo chmod +x /usr/local/bin/docker-compose\n    \n    #测试安装是否成功\n    $ docker-compose --version\n    docker-compose version 1.25.5, build 1110ad01\n    ```","slug":"fabric1.4安装部署","published":1,"updated":"2020-08-12T15:42:53.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30mi000bvkv9dfujhy5y","content":"<p><strong>注意：</strong> 本文基于CentOS7，由于docker镜像较大，确保磁盘空间充足</p>\n<h3 id=\"卸载已安装的Docker\"><a href=\"#卸载已安装的Docker\" class=\"headerlink\" title=\"卸载已安装的Docker\"></a>卸载已安装的Docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove docker \\</span><br><span class=\"line\">              docker-client \\</span><br><span class=\"line\">              docker-client-latest \\</span><br><span class=\"line\">              docker-common \\</span><br><span class=\"line\">              docker-latest \\</span><br><span class=\"line\">              docker-latest-logrotate \\</span><br><span class=\"line\">              docker-logrotate \\</span><br><span class=\"line\">              docker-selinux \\</span><br><span class=\"line\">              docker-engine-selinux \\</span><br><span class=\"line\">              docker-engine</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<!-- more -->\n<h3 id=\"安装Docker和Docker-compose\"><a href=\"#安装Docker和Docker-compose\" class=\"headerlink\" title=\"安装Docker和Docker-compose\"></a>安装Docker和Docker-compose</h3><ul>\n<li><p>yum换阿里源</p>\n<ul>\n<li>安装一些必要包  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget curl vim git gcc-c++</span><br></pre></td></tr></table></figure></li>\n<li>备份原有源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure></li>\n<li>进入目录<code>/etc/yum.repos.d/</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>获取源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure></li>\n<li>自动选择最快源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure></li>\n<li>更新     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装pip(安装pip主要是为了没梯子的情况下安装docker-compose，有梯子的情况下可以不安装pip)</p>\n<ul>\n<li>先安装epel扩展源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure></li>\n<li>安装ius软件源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install https:&#x2F;&#x2F;centos7.iuscommunity.org&#x2F;ius-release.rpm</span><br></pre></td></tr></table></figure></li>\n<li>安装python3, pip3  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install python36u</span><br></pre></td></tr></table></figure></li>\n<li>pip换豆瓣源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;.pip</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~&#x2F;.pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>\n  添加如下内容：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url&#x3D;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class=\"line\">trusted-host &#x3D; pypi.douban.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装Docker CE</p>\n<ul>\n<li>安装yum-utils  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li>\n<li>设置docker-ce阿里源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>\n  随后运行  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure></li>\n<li>查看可安装Docker版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure></li>\n<li>安装docker-ce  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li>\n<li>查看安装的docker-ce版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></li>\n<li>启动Docker并设置开机启动  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装docker-compose</p>\n<ul>\n<li>方法一：pip3安装docker-compose（适合无梯子）  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>方法二：直接从<code>github</code>获取(适合有梯子,需要安装proxychains4，没梯子的情况下极慢)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.4&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>查看docker-compose版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Go安装（1-13-5）\"><a href=\"#Go安装（1-13-5）\" class=\"headerlink\" title=\"Go安装（1.13.5）\"></a>Go安装（1.13.5）</h3><ul>\n<li>首先官网下载go安装包  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n  <strong>如若下载不了也可以直接用帮区里面的文件</strong></li>\n<li>解压到目录<code>/usr/local</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C &#x2F;usr&#x2F;local -xzf go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>编辑<code>/etc/profile</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>\n<li>文件末尾添加两行如下  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin</span><br><span class=\"line\">export GOPATH&#x3D;&#x2F;opt&#x2F;gopath</span><br></pre></td></tr></table></figure></li>\n<li>使其生效  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>\n<li>查看是否添加成功  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure></li>\n<li>查看go版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><ul>\n<li><p>安装node.js(主要是根据官方文档运行第一个程序用的javascripts)</p>\n<ul>\n<li><p>​    安装nvm(第一种方法，需要梯子)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使环境变量生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> -v nvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有node版本</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照指定版本的node</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否安装成功</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>下载压缩包（这是第二种方法）</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;opt</span><br></pre></td></tr></table></figure></code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;v8.11.2&#x2F;node-v8.11.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压并创建软连接</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v8.11.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;opt&#x2F;node-v8.11.2-linux-x64&#x2F;bin&#x2F;npm   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;opt&#x2F;node-v8.11.2-linux-x64&#x2F;bin&#x2F;node   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查看版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置淘宝镜像源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>  查看是否成功:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<p>  成功则输出如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>下载项目文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout v1.4.4</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd scripts</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装测试fabric-1.4.4所需的docker镜像(<strong>此步骤需确保磁盘空间足够</strong>)</p>\n<ul>\n<li><p>设置docker阿里源</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>\n<p>  修改内容如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;giezbins.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  重载守护进程</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>  重启docker</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n<li><p>修改当前目录下bootstrap.sh文件中的变量<code>BINARIES</code>为<code>false</code></p>\n</li>\n<li><p>运行脚本进行下载</p>\n<p>  没梯子就直接运行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;bootstrap.sh</span><br></pre></td></tr></table></figure>\n<p>  有梯子的话可以用<code>proxychains4</code>工具:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 bash bootstrap.sh</span><br></pre></td></tr></table></figure></li>\n<li><p>通过命令<code>docker images</code>查看镜像是否安装完成:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyperledger&#x2F;fabric-zookeeper</span><br><span class=\"line\">hyperledger&#x2F;fabric-orderer</span><br><span class=\"line\">hyperledger&#x2F;fabric-peer</span><br><span class=\"line\">hyperledger&#x2F;fabric-couchdb</span><br><span class=\"line\">hyperledger&#x2F;fabric-ca</span><br><span class=\"line\">hyperledger&#x2F;fabric-ccenv</span><br><span class=\"line\">hyperledger&#x2F;fabric-kafka</span><br><span class=\"line\">hyperledger&#x2F;fabric-tools</span><br><span class=\"line\">hyperledger&#x2F;fabric-baseimage</span><br><span class=\"line\">hyperledger&#x2F;fabric-baseos</span><br><span class=\"line\">hyperledger&#x2F;fabric-javaenv</span><br></pre></td></tr></table></figure></li>\n<li><p>手动下载二进制工具</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  .&#x2F;fabric-samples</span><br></pre></td></tr></table></figure>\n<p>  有梯子就直接运行：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 wget https:&#x2F;&#x2F;github.cm&#x2F;hyperledger&#x2F;fabric&#x2F;releases&#x2F;download&#x2F;v1.4.4&#x2F;hyperledger-fabric-linux-amd64-1.4.4.tar.gz | tar xzf</span><br><span class=\"line\">proxychains4 wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;releases&#x2F;download&#x2F;v1.4.4&#x2F;hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz | tar xzf</span><br></pre></td></tr></table></figure>\n<p>  没有梯子就直接到从码云之类的其他网站下载<code>hyperledger-fabric-linux-amd64-1.4.4.tar.gz</code>和<code>hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz</code>，然后将两个压缩包拷贝到当前目录并解压：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf hyperledger-fabric-linux-amd64-1.4.4.tar.gz</span><br><span class=\"line\">tar xzf hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>测试网络是否可用</p>\n<ul>\n<li>进入<code>first-nerwork</code>目录  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .&#x2F;first-network</span><br></pre></td></tr></table></figure>\n  环境污染可能会导致网络启动失败，可以先运行以下命令清洗环境：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images | grep fabcar | awk &#39;&#123;print $3&#125;&#39;)</span><br></pre></td></tr></table></figure>\n  直接运行脚本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;byfn.sh -m generate</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;byfn.sh -m up</span><br></pre></td></tr></table></figure>\n  若是未出现error，则证明成功运行，可以运行<code>./byfn.sh -m down</code>命令关闭网络。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"跑通JavaScript样例\"><a href=\"#跑通JavaScript样例\" class=\"headerlink\" title=\"跑通JavaScript样例\"></a>跑通JavaScript样例</h3><ul>\n<li><p>进入样例中的<code>fabcar</code>目录</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..&#x2F;fabcar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动网络</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;startFabric.sh</span><br></pre></td></tr></table></figure>\n<p>  <strong>注：</strong> 如果之前做过该操作，需通过下列命令清空环境后再启动网络：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images | grep fabcar | awk &#39;&#123;print $3&#125;&#39;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入目录<code>javascripts</code></p>\n</li>\n<li><p>下载必要模块</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>\n<p>  <strong>注：</strong> 如果出现error，可能是<code>nodejs</code>版本不对，可以试试<code>10.18.1</code>,运行命令可加上<code>--build-from-source</code>参数再次尝试（先删除当前目录下的<code>node_modules</code>目录,因为此步骤安装的模块都放在该目录中，不删除重新进行依然会出错！！！）</p>\n</li>\n<li><p>接着就可按照<code>https://hyperledger-fabric.readthedocs.io/en/release-1.4/write_first_app.html</code>的教程中的内容往下进行测试（接着<code>npm install</code>之后）</p>\n<h2 id=\"ubuntu下安装docker-ce和docker-compose\"><a href=\"#ubuntu下安装docker-ce和docker-compose\" class=\"headerlink\" title=\"ubuntu下安装docker-ce和docker-compose\"></a>ubuntu下安装docker-ce和docker-compose</h2><h4 id=\"卸载原有docker-engine\"><a href=\"#卸载原有docker-engine\" class=\"headerlink\" title=\"卸载原有docker engine\"></a>卸载原有docker engine</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker \\</span><br><span class=\"line\">docker-engine \\</span><br><span class=\"line\">docker.io</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加ubuntu软件源密钥\"><a href=\"#添加ubuntu软件源密钥\" class=\"headerlink\" title=\"添加ubuntu软件源密钥\"></a>添加ubuntu软件源密钥</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加https传输的软件包以及ca证书\"><a href=\"#添加https传输的软件包以及ca证书\" class=\"headerlink\" title=\"添加https传输的软件包以及ca证书\"></a>添加https传输的软件包以及ca证书</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">apt-transport-https \\</span><br><span class=\"line\">ca-certificates \\</span><br><span class=\"line\">curl \\</span><br><span class=\"line\">software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"向source-list添加Docker软件源\"><a href=\"#向source-list添加Docker软件源\" class=\"headerlink\" title=\"向source.list添加Docker软件源\"></a>向source.list添加Docker软件源</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\"><span class=\"string\">\"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  bionic stable\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新软件源并安装的docker-ce\"><a href=\"#更新软件源并安装的docker-ce\" class=\"headerlink\" title=\"更新软件源并安装的docker-ce\"></a>更新软件源并安装的docker-ce</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 更新apt-get，并进行安装</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加docker用户组防止出现Unix-socket-与-Docker-引擎通讯权限不足的问题\"><a href=\"#添加docker用户组防止出现Unix-socket-与-Docker-引擎通讯权限不足的问题\" class=\"headerlink\" title=\"添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题\"></a>添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 建立 docker 组：</span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">// 将当前用户加入 docker 组：</span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$USER</span> docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动并测试是否安装成功\"><a href=\"#启动并测试是否安装成功\" class=\"headerlink\" title=\"启动并测试是否安装成功\"></a>启动并测试是否安装成功</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">\"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class=\"variable\">$(uname -s)</span>-<span class=\"variable\">$(uname -m)</span>\"</span> -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试安装是否成功</span></span><br><span class=\"line\">$ docker-compose --version</span><br><span class=\"line\">docker-compose version 1.25.5, build 1110ad01</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong>注意：</strong> 本文基于CentOS7，由于docker镜像较大，确保磁盘空间充足</p>\n<h3 id=\"卸载已安装的Docker\"><a href=\"#卸载已安装的Docker\" class=\"headerlink\" title=\"卸载已安装的Docker\"></a>卸载已安装的Docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove docker \\</span><br><span class=\"line\">              docker-client \\</span><br><span class=\"line\">              docker-client-latest \\</span><br><span class=\"line\">              docker-common \\</span><br><span class=\"line\">              docker-latest \\</span><br><span class=\"line\">              docker-latest-logrotate \\</span><br><span class=\"line\">              docker-logrotate \\</span><br><span class=\"line\">              docker-selinux \\</span><br><span class=\"line\">              docker-engine-selinux \\</span><br><span class=\"line\">              docker-engine</span><br></pre></td></tr></table></figure>","more":"<!-- more -->\n<h3 id=\"安装Docker和Docker-compose\"><a href=\"#安装Docker和Docker-compose\" class=\"headerlink\" title=\"安装Docker和Docker-compose\"></a>安装Docker和Docker-compose</h3><ul>\n<li><p>yum换阿里源</p>\n<ul>\n<li>安装一些必要包  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget curl vim git gcc-c++</span><br></pre></td></tr></table></figure></li>\n<li>备份原有源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure></li>\n<li>进入目录<code>/etc/yum.repos.d/</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>获取源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br></pre></td></tr></table></figure></li>\n<li>自动选择最快源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure></li>\n<li>更新     <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装pip(安装pip主要是为了没梯子的情况下安装docker-compose，有梯子的情况下可以不安装pip)</p>\n<ul>\n<li>先安装epel扩展源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></table></figure></li>\n<li>安装ius软件源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install https:&#x2F;&#x2F;centos7.iuscommunity.org&#x2F;ius-release.rpm</span><br></pre></td></tr></table></figure></li>\n<li>安装python3, pip3  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install python36u</span><br></pre></td></tr></table></figure></li>\n<li>pip换豆瓣源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~&#x2F;.pip</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~&#x2F;.pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure>\n  添加如下内容：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url&#x3D;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class=\"line\">trusted-host &#x3D; pypi.douban.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装Docker CE</p>\n<ul>\n<li>安装yum-utils  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li>\n<li>设置docker-ce阿里源  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure>\n  随后运行  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache fast</span><br></pre></td></tr></table></figure></li>\n<li>查看可安装Docker版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure></li>\n<li>安装docker-ce  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li>\n<li>查看安装的docker-ce版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></li>\n<li>启动Docker并设置开机启动  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装docker-compose</p>\n<ul>\n<li>方法一：pip3安装docker-compose（适合无梯子）  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>方法二：直接从<code>github</code>获取(适合有梯子,需要安装proxychains4，没梯子的情况下极慢)  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl -L https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.25.4&#x2F;docker-compose-&#96;uname -s&#96;-&#96;uname -m&#96; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure></li>\n<li>查看docker-compose版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose version</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Go安装（1-13-5）\"><a href=\"#Go安装（1-13-5）\" class=\"headerlink\" title=\"Go安装（1.13.5）\"></a>Go安装（1.13.5）</h3><ul>\n<li>首先官网下载go安装包  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n  <strong>如若下载不了也可以直接用帮区里面的文件</strong></li>\n<li>解压到目录<code>/usr/local</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C &#x2F;usr&#x2F;local -xzf go1.13.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>编辑<code>/etc/profile</code>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>\n<li>文件末尾添加两行如下  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin</span><br><span class=\"line\">export GOPATH&#x3D;&#x2F;opt&#x2F;gopath</span><br></pre></td></tr></table></figure></li>\n<li>使其生效  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure></li>\n<li>查看是否添加成功  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure></li>\n<li>查看go版本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go version</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><ul>\n<li><p>安装node.js(主要是根据官方文档运行第一个程序用的javascripts)</p>\n<ul>\n<li><p>​    安装nvm(第一种方法，需要梯子)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使环境变量生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">command</span> -v nvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有node版本</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls-remote</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照指定版本的node</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否安装成功</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>下载压缩包（这是第二种方法）</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;opt</span><br></pre></td></tr></table></figure></code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;v8.11.2&#x2F;node-v8.11.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压并创建软连接</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v8.11.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;opt&#x2F;node-v8.11.2-linux-x64&#x2F;bin&#x2F;npm   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s &#x2F;opt&#x2F;node-v8.11.2-linux-x64&#x2F;bin&#x2F;node   &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>查看版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置淘宝镜像源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>  查看是否成功:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<p>  成功则输出如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>下载项目文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric.git</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout v1.4.4</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd scripts</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装测试fabric-1.4.4所需的docker镜像(<strong>此步骤需确保磁盘空间足够</strong>)</p>\n<ul>\n<li><p>设置docker阿里源</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>\n<p>  修改内容如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;giezbins.mirror.aliyuncs.com&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  重载守护进程</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>  重启docker</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart docker</span><br></pre></td></tr></table></figure></li>\n<li><p>修改当前目录下bootstrap.sh文件中的变量<code>BINARIES</code>为<code>false</code></p>\n</li>\n<li><p>运行脚本进行下载</p>\n<p>  没梯子就直接运行</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;bootstrap.sh</span><br></pre></td></tr></table></figure>\n<p>  有梯子的话可以用<code>proxychains4</code>工具:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 bash bootstrap.sh</span><br></pre></td></tr></table></figure></li>\n<li><p>通过命令<code>docker images</code>查看镜像是否安装完成:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyperledger&#x2F;fabric-zookeeper</span><br><span class=\"line\">hyperledger&#x2F;fabric-orderer</span><br><span class=\"line\">hyperledger&#x2F;fabric-peer</span><br><span class=\"line\">hyperledger&#x2F;fabric-couchdb</span><br><span class=\"line\">hyperledger&#x2F;fabric-ca</span><br><span class=\"line\">hyperledger&#x2F;fabric-ccenv</span><br><span class=\"line\">hyperledger&#x2F;fabric-kafka</span><br><span class=\"line\">hyperledger&#x2F;fabric-tools</span><br><span class=\"line\">hyperledger&#x2F;fabric-baseimage</span><br><span class=\"line\">hyperledger&#x2F;fabric-baseos</span><br><span class=\"line\">hyperledger&#x2F;fabric-javaenv</span><br></pre></td></tr></table></figure></li>\n<li><p>手动下载二进制工具</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  .&#x2F;fabric-samples</span><br></pre></td></tr></table></figure>\n<p>  有梯子就直接运行：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains4 wget https:&#x2F;&#x2F;github.cm&#x2F;hyperledger&#x2F;fabric&#x2F;releases&#x2F;download&#x2F;v1.4.4&#x2F;hyperledger-fabric-linux-amd64-1.4.4.tar.gz | tar xzf</span><br><span class=\"line\">proxychains4 wget https:&#x2F;&#x2F;github.com&#x2F;hyperledger&#x2F;fabric-ca&#x2F;releases&#x2F;download&#x2F;v1.4.4&#x2F;hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz | tar xzf</span><br></pre></td></tr></table></figure>\n<p>  没有梯子就直接到从码云之类的其他网站下载<code>hyperledger-fabric-linux-amd64-1.4.4.tar.gz</code>和<code>hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz</code>，然后将两个压缩包拷贝到当前目录并解压：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf hyperledger-fabric-linux-amd64-1.4.4.tar.gz</span><br><span class=\"line\">tar xzf hyperledger-fabric-ca-linux-amd64-1.4.4.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>测试网络是否可用</p>\n<ul>\n<li>进入<code>first-nerwork</code>目录  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .&#x2F;first-network</span><br></pre></td></tr></table></figure>\n  环境污染可能会导致网络启动失败，可以先运行以下命令清洗环境：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images | grep fabcar | awk &#39;&#123;print $3&#125;&#39;)</span><br></pre></td></tr></table></figure>\n  直接运行脚本  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;byfn.sh -m generate</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;byfn.sh -m up</span><br></pre></td></tr></table></figure>\n  若是未出现error，则证明成功运行，可以运行<code>./byfn.sh -m down</code>命令关闭网络。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"跑通JavaScript样例\"><a href=\"#跑通JavaScript样例\" class=\"headerlink\" title=\"跑通JavaScript样例\"></a>跑通JavaScript样例</h3><ul>\n<li><p>进入样例中的<code>fabcar</code>目录</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..&#x2F;fabcar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动网络</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;startFabric.sh</span><br></pre></td></tr></table></figure>\n<p>  <strong>注：</strong> 如果之前做过该操作，需通过下列命令清空环境后再启动网络：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images | grep fabcar | awk &#39;&#123;print $3&#125;&#39;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入目录<code>javascripts</code></p>\n</li>\n<li><p>下载必要模块</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>\n<p>  <strong>注：</strong> 如果出现error，可能是<code>nodejs</code>版本不对，可以试试<code>10.18.1</code>,运行命令可加上<code>--build-from-source</code>参数再次尝试（先删除当前目录下的<code>node_modules</code>目录,因为此步骤安装的模块都放在该目录中，不删除重新进行依然会出错！！！）</p>\n</li>\n<li><p>接着就可按照<code>https://hyperledger-fabric.readthedocs.io/en/release-1.4/write_first_app.html</code>的教程中的内容往下进行测试（接着<code>npm install</code>之后）</p>\n<h2 id=\"ubuntu下安装docker-ce和docker-compose\"><a href=\"#ubuntu下安装docker-ce和docker-compose\" class=\"headerlink\" title=\"ubuntu下安装docker-ce和docker-compose\"></a>ubuntu下安装docker-ce和docker-compose</h2><h4 id=\"卸载原有docker-engine\"><a href=\"#卸载原有docker-engine\" class=\"headerlink\" title=\"卸载原有docker engine\"></a>卸载原有docker engine</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker \\</span><br><span class=\"line\">docker-engine \\</span><br><span class=\"line\">docker.io</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加ubuntu软件源密钥\"><a href=\"#添加ubuntu软件源密钥\" class=\"headerlink\" title=\"添加ubuntu软件源密钥\"></a>添加ubuntu软件源密钥</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加https传输的软件包以及ca证书\"><a href=\"#添加https传输的软件包以及ca证书\" class=\"headerlink\" title=\"添加https传输的软件包以及ca证书\"></a>添加https传输的软件包以及ca证书</h4>  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install \\</span><br><span class=\"line\">apt-transport-https \\</span><br><span class=\"line\">ca-certificates \\</span><br><span class=\"line\">curl \\</span><br><span class=\"line\">software-properties-common</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"向source-list添加Docker软件源\"><a href=\"#向source-list添加Docker软件源\" class=\"headerlink\" title=\"向source.list添加Docker软件源\"></a>向source.list添加Docker软件源</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\"><span class=\"string\">\"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu  bionic stable\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新软件源并安装的docker-ce\"><a href=\"#更新软件源并安装的docker-ce\" class=\"headerlink\" title=\"更新软件源并安装的docker-ce\"></a>更新软件源并安装的docker-ce</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 更新apt-get，并进行安装</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install docker-ce</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加docker用户组防止出现Unix-socket-与-Docker-引擎通讯权限不足的问题\"><a href=\"#添加docker用户组防止出现Unix-socket-与-Docker-引擎通讯权限不足的问题\" class=\"headerlink\" title=\"添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题\"></a>添加docker用户组防止出现Unix socket 与 Docker 引擎通讯权限不足的问题</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 建立 docker 组：</span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">// 将当前用户加入 docker 组：</span><br><span class=\"line\">sudo gpasswd -a <span class=\"variable\">$USER</span> docker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动并测试是否安装成功\"><a href=\"#启动并测试是否安装成功\" class=\"headerlink\" title=\"启动并测试是否安装成功\"></a>启动并测试是否安装成功</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">\"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class=\"variable\">$(uname -s)</span>-<span class=\"variable\">$(uname -m)</span>\"</span> -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#测试安装是否成功</span></span><br><span class=\"line\">$ docker-compose --version</span><br><span class=\"line\">docker-compose version 1.25.5, build 1110ad01</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"区块链入门","date":"2020-01-22T06:45:27.000Z","_content":"\n\n### 特性\n- hiding\n- collision resistance\n\n### 两种数据结构\n- hash链\n- merkle树（B+树）\n<!-- more -->\n<!-- more -->","source":"_posts/区块链入门.md","raw":"---\ntitle: 区块链入门\ndate: 2020-01-22 14:45:27\ntags:\n---\n\n\n### 特性\n- hiding\n- collision resistance\n\n### 两种数据结构\n- hash链\n- merkle树（B+树）\n<!-- more -->\n<!-- more -->","slug":"区块链入门","published":1,"updated":"2020-08-12T15:43:37.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30mn000gvkv9fw9cd2e8","content":"<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>hiding</li>\n<li>collision resistance</li>\n</ul>\n<h3 id=\"两种数据结构\"><a href=\"#两种数据结构\" class=\"headerlink\" title=\"两种数据结构\"></a>两种数据结构</h3><ul>\n<li>hash链</li>\n<li>merkle树（B+树）<a id=\"more\"></a>\n<!-- more --></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>hiding</li>\n<li>collision resistance</li>\n</ul>\n<h3 id=\"两种数据结构\"><a href=\"#两种数据结构\" class=\"headerlink\" title=\"两种数据结构\"></a>两种数据结构</h3><ul>\n<li>hash链</li>\n<li>merkle树（B+树）","more":"<!-- more --></li>\n</ul>"},{"title":"指针数组、数组指针、指针函数、函数指针","date":"2018-08-28T10:03:04.000Z","_content":"\n注：本文中的int型变量为32位，占四个字节。\n\n本篇内容旨在对指针数组、数组指针、指针函数、函数指针进行总结，也希望能在总结的同时能有更深入的理解。\n\n## 数组指针\n\n数组指针顾名思义是个指针，定义形如`(*arr)[n]`的一个数组指针，由于`()`的优先级最高，所以定义的是一个指针，这个指针指向含有n个元素的数组。\n<!-- more -->\n<!-- more -->\n可以设计一个程序如下：\n```C\n#include<stdio.h>\n\nint main(int argc,int* argv[])\n{\n  int a[3][4] = {1,2,3,4,\n                 5,6,7,8,\n                 9,10,11,12\n  };\n  int (*arr)[4] = a;\n  printf(\"arr = %p\\n\",arr);\n  printf(\"a[0][0] = %p\\n\",&a[0][0]);\n  printf(\"ADDR(a[0][1]) = %p\\n\",&a[0][1]);\n  printf(\"arr[1] = %p\\n\",++arr);\n  printf(\"a[1] = %p\\n\",a[1]);\n  return 0;\n}\n```\n运行程序后输出结果如下:\n```C\narr = 0x7ffefffb8810\na[0][0] = 0x7ffefffb8810\nADDR(a[0][1]) = 0x7ffefffb8814\narr[1] = 0x7ffefffb8820\na[1] = 0x7ffefffb8820\n```\n\n可以看到，初始化了arr后，其值与数组a[][]的首地址相同，而对arr的自增操作则使其值跳跃了整个数组的长度，该操作等同于二维数组a[][]的行地址加1，而进行如果下标操作a[0][1]，该元素的地址相对于a[0][0]只是增加了四个字节，即一个int型变量的长度。\n\n我们可以很清晰的从下图理解数组指针：\n![数组指针](/images/arr_p.jpg)\n\n\n## 指针数组\n\n指针数组的概念就相对简单，指针数组是个数组，只不过内部存的元素都是指针类型，由于`[]`的优先级要高于`*`，所以该数组的定义形如`*arr[n]`。\n\n例子如下：\n\n```C\n#include<stdio.h>\n\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  int *arr[] = {&a,&b};\n  printf(\"a = %d,b = %d\\n\",*(arr[0]),*(arr[1]));\n  return 0;\n}\n```\n程序输出结果如下：\n\n```C\na = 5,b = 10\n```\n\n数组指针没有什么难度，只是用数组去存指针而已。\n\n\n## 函数指针\n\n函数指针其实在编程中相当有用，我们可以将函数的形参声明为函数指针，从而可以将函数的地址传入。\n\n函数作为参数传递跟变量传递一样有两种方式：值传递，地址传递。但是值传递有一个不好之处在于太占用空间，假设在A函数中声明一个形如B函数的形参，而非形如B函数的函数指针，那么将B函数作为参数传入时，就要分配整个B函数的空间给该参数，而函数指针则只会传入一个地址。那么还有一个问题，在函数内部进行函数调用也是一样，而且不会进行值传递，但是在函数内部进行调用，不够灵活，同一类函数可以实现的功能不一样，形如B函数的函数功能和函数名可能有所不同，而每次调用不同的函数时都要去改变A函数未免太不方便，所以才要把函数地址当作参数进行传入。\n\n设计一个程序如下：\n\n```C\n#include<stdio.h>\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint cmp_max(int x,int y)\n{\n  return x > y?x:y;\n}\nint cmp(int x,int y,int (*compare)(int,int))\n{\n  return (*compare)(x,y);\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  printf(\"the min of a,b is %d\\n\",cmp(a,b,cmp_min));\n  return 0;\n}\n```\n输入结果如下：\n\n```C\nthe min of a,b is 5\n```\n值得一提的是，函数指针是一个指针，我们不能在声明函数指针的同时进行函数的定义，因为我们只是声明一个指针，我们只能声明一个函数指针，然后用一个定义过的函数去对该指针进行初始化，就像下面这样：\n\n```C\n#include<stdio.h>\n\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 6;\n  int (*compare)(int,int) = cmp_min;\n  printf(\"the min of a,b is %d\\n\",(*compare)(a,b));\n  return 0;\n}\n```\n\n输出结果跟上面一样。\n\n其实函数指针可以和指针数组结合起来使用，我们都知道函数名单独使用其实是一个地址，所以可以将其作为指针存于指针数组中，通过数组对其进行访问。\n\n例子如下：\n\n```C\n#include<stdio.h>\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint cmp_max(int x,int y)\n{\n  return x > y?x:y;\n}\nint cmp(int x,int y,int (**compare)(int,int))\n{\n  printf(\"the min of a,b is %d\\n\",(*compare[0])(x,y));\n  printf(\"the max of a,b is %d\\n\",(*compare[1])(x,y));\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  int (*arr[])(int,int) = {cmp_min,cmp_max};\n  cmp(a,b,arr);\n  return 0;\n}\n```\n\n输出结果如下：\n\n```C\nthe min of a,b is 5\nthe max of a,b is 10\n```\n\n在`cmp(int x,int y,int (**compare)(int,int))`中声明的函数形参使用了指针的指针，因为我们传入的是是数组的地址，需要先解引用获得数组内的函数地址，所以使用了指针的指针，也可以使用另一种形式：`*compare[](int,int)`，效果等同；如果我们在传参时使用了数组下标，则可以不用如此声明，直接声明为`cmp(int x,int y,int (*compare)(int,int))`即可。\n\n## 指针函数\n\n指针函数是个函数，只不过返回值是个指针类型，这也是一个比较简单的概念，就像变量返回一样，指针函数的定义形如`*func()`。","source":"_posts/指针数组、数组指针、指针函数、函数指针.md","raw":"---\ntitle: 指针数组、数组指针、指针函数、函数指针\ndate: 2018-08-28 18:03:04\ntags: C++\ncategories: C++\n---\n\n注：本文中的int型变量为32位，占四个字节。\n\n本篇内容旨在对指针数组、数组指针、指针函数、函数指针进行总结，也希望能在总结的同时能有更深入的理解。\n\n## 数组指针\n\n数组指针顾名思义是个指针，定义形如`(*arr)[n]`的一个数组指针，由于`()`的优先级最高，所以定义的是一个指针，这个指针指向含有n个元素的数组。\n<!-- more -->\n<!-- more -->\n可以设计一个程序如下：\n```C\n#include<stdio.h>\n\nint main(int argc,int* argv[])\n{\n  int a[3][4] = {1,2,3,4,\n                 5,6,7,8,\n                 9,10,11,12\n  };\n  int (*arr)[4] = a;\n  printf(\"arr = %p\\n\",arr);\n  printf(\"a[0][0] = %p\\n\",&a[0][0]);\n  printf(\"ADDR(a[0][1]) = %p\\n\",&a[0][1]);\n  printf(\"arr[1] = %p\\n\",++arr);\n  printf(\"a[1] = %p\\n\",a[1]);\n  return 0;\n}\n```\n运行程序后输出结果如下:\n```C\narr = 0x7ffefffb8810\na[0][0] = 0x7ffefffb8810\nADDR(a[0][1]) = 0x7ffefffb8814\narr[1] = 0x7ffefffb8820\na[1] = 0x7ffefffb8820\n```\n\n可以看到，初始化了arr后，其值与数组a[][]的首地址相同，而对arr的自增操作则使其值跳跃了整个数组的长度，该操作等同于二维数组a[][]的行地址加1，而进行如果下标操作a[0][1]，该元素的地址相对于a[0][0]只是增加了四个字节，即一个int型变量的长度。\n\n我们可以很清晰的从下图理解数组指针：\n![数组指针](/images/arr_p.jpg)\n\n\n## 指针数组\n\n指针数组的概念就相对简单，指针数组是个数组，只不过内部存的元素都是指针类型，由于`[]`的优先级要高于`*`，所以该数组的定义形如`*arr[n]`。\n\n例子如下：\n\n```C\n#include<stdio.h>\n\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  int *arr[] = {&a,&b};\n  printf(\"a = %d,b = %d\\n\",*(arr[0]),*(arr[1]));\n  return 0;\n}\n```\n程序输出结果如下：\n\n```C\na = 5,b = 10\n```\n\n数组指针没有什么难度，只是用数组去存指针而已。\n\n\n## 函数指针\n\n函数指针其实在编程中相当有用，我们可以将函数的形参声明为函数指针，从而可以将函数的地址传入。\n\n函数作为参数传递跟变量传递一样有两种方式：值传递，地址传递。但是值传递有一个不好之处在于太占用空间，假设在A函数中声明一个形如B函数的形参，而非形如B函数的函数指针，那么将B函数作为参数传入时，就要分配整个B函数的空间给该参数，而函数指针则只会传入一个地址。那么还有一个问题，在函数内部进行函数调用也是一样，而且不会进行值传递，但是在函数内部进行调用，不够灵活，同一类函数可以实现的功能不一样，形如B函数的函数功能和函数名可能有所不同，而每次调用不同的函数时都要去改变A函数未免太不方便，所以才要把函数地址当作参数进行传入。\n\n设计一个程序如下：\n\n```C\n#include<stdio.h>\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint cmp_max(int x,int y)\n{\n  return x > y?x:y;\n}\nint cmp(int x,int y,int (*compare)(int,int))\n{\n  return (*compare)(x,y);\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  printf(\"the min of a,b is %d\\n\",cmp(a,b,cmp_min));\n  return 0;\n}\n```\n输入结果如下：\n\n```C\nthe min of a,b is 5\n```\n值得一提的是，函数指针是一个指针，我们不能在声明函数指针的同时进行函数的定义，因为我们只是声明一个指针，我们只能声明一个函数指针，然后用一个定义过的函数去对该指针进行初始化，就像下面这样：\n\n```C\n#include<stdio.h>\n\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 6;\n  int (*compare)(int,int) = cmp_min;\n  printf(\"the min of a,b is %d\\n\",(*compare)(a,b));\n  return 0;\n}\n```\n\n输出结果跟上面一样。\n\n其实函数指针可以和指针数组结合起来使用，我们都知道函数名单独使用其实是一个地址，所以可以将其作为指针存于指针数组中，通过数组对其进行访问。\n\n例子如下：\n\n```C\n#include<stdio.h>\nint cmp_min(int x,int y)\n{\n  return x < y?x:y;\n}\nint cmp_max(int x,int y)\n{\n  return x > y?x:y;\n}\nint cmp(int x,int y,int (**compare)(int,int))\n{\n  printf(\"the min of a,b is %d\\n\",(*compare[0])(x,y));\n  printf(\"the max of a,b is %d\\n\",(*compare[1])(x,y));\n}\nint main(int argc,int* argv[])\n{\n  int a = 5,b = 10;\n  int (*arr[])(int,int) = {cmp_min,cmp_max};\n  cmp(a,b,arr);\n  return 0;\n}\n```\n\n输出结果如下：\n\n```C\nthe min of a,b is 5\nthe max of a,b is 10\n```\n\n在`cmp(int x,int y,int (**compare)(int,int))`中声明的函数形参使用了指针的指针，因为我们传入的是是数组的地址，需要先解引用获得数组内的函数地址，所以使用了指针的指针，也可以使用另一种形式：`*compare[](int,int)`，效果等同；如果我们在传参时使用了数组下标，则可以不用如此声明，直接声明为`cmp(int x,int y,int (*compare)(int,int))`即可。\n\n## 指针函数\n\n指针函数是个函数，只不过返回值是个指针类型，这也是一个比较简单的概念，就像变量返回一样，指针函数的定义形如`*func()`。","slug":"指针数组、数组指针、指针函数、函数指针","published":1,"updated":"2020-08-12T15:43:16.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30mo000ivkv912kgdt4n","content":"<p>注：本文中的int型变量为32位，占四个字节。</p>\n<p>本篇内容旨在对指针数组、数组指针、指针函数、函数指针进行总结，也希望能在总结的同时能有更深入的理解。</p>\n<h2 id=\"数组指针\"><a href=\"#数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组指针</h2><p>数组指针顾名思义是个指针，定义形如<code>(*arr)[n]</code>的一个数组指针，由于<code>()</code>的优先级最高，所以定义的是一个指针，这个指针指向含有n个元素的数组。</p>\n<a id=\"more\"></a>\n<!-- more -->\n<p>可以设计一个程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,</span><br><span class=\"line\">                 <span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,</span><br><span class=\"line\">                 <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*arr)[<span class=\"number\">4</span>] = a;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"arr = %p\\n\"</span>,arr);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a[0][0] = %p\\n\"</span>,&amp;a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ADDR(a[0][1]) = %p\\n\"</span>,&amp;a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[1] = %p\\n\"</span>,++arr);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a[1] = %p\\n\"</span>,a[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行程序后输出结果如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = <span class=\"number\">0x7ffefffb8810</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0x7ffefffb8810</span></span><br><span class=\"line\">ADDR(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) = <span class=\"number\">0x7ffefffb8814</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">0x7ffefffb8820</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">0x7ffefffb8820</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，初始化了arr后，其值与数组a[][]的首地址相同，而对arr的自增操作则使其值跳跃了整个数组的长度，该操作等同于二维数组a[][]的行地址加1，而进行如果下标操作a[0][1]，该元素的地址相对于a[0][0]只是增加了四个字节，即一个int型变量的长度。</p>\n<p>我们可以很清晰的从下图理解数组指针：<br><img data-src=\"/images/arr_p.jpg\" alt=\"数组指针\"></p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>指针数组的概念就相对简单，指针数组是个数组，只不过内部存的元素都是指针类型，由于<code>[]</code>的优先级要高于<code>*</code>，所以该数组的定义形如<code>*arr[n]</code>。</p>\n<p>例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> *arr[] = &#123;&amp;a,&amp;b&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d,b = %d\\n\"</span>,*(arr[<span class=\"number\">0</span>]),*(arr[<span class=\"number\">1</span>]));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序输出结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>数组指针没有什么难度，只是用数组去存指针而已。</p>\n<h2 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h2><p>函数指针其实在编程中相当有用，我们可以将函数的形参声明为函数指针，从而可以将函数的地址传入。</p>\n<p>函数作为参数传递跟变量传递一样有两种方式：值传递，地址传递。但是值传递有一个不好之处在于太占用空间，假设在A函数中声明一个形如B函数的形参，而非形如B函数的函数指针，那么将B函数作为参数传入时，就要分配整个B函数的空间给该参数，而函数指针则只会传入一个地址。那么还有一个问题，在函数内部进行函数调用也是一样，而且不会进行值传递，但是在函数内部进行调用，不够灵活，同一类函数可以实现的功能不一样，形如B函数的函数功能和函数名可能有所不同，而每次调用不同的函数时都要去改变A函数未免太不方便，所以才要把函数地址当作参数进行传入。</p>\n<p>设计一个程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (*compare)(x,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,cmp(a,b,cmp_min));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the <span class=\"built_in\">min</span> of a,b is <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>值得一提的是，函数指针是一个指针，我们不能在声明函数指针的同时进行函数的定义，因为我们只是声明一个指针，我们只能声明一个函数指针，然后用一个定义过的函数去对该指针进行初始化，就像下面这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>) = cmp_min;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,(*compare)(a,b));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果跟上面一样。</p>\n<p>其实函数指针可以和指针数组结合起来使用，我们都知道函数名单独使用其实是一个地址，所以可以将其作为指针存于指针数组中，通过数组对其进行访问。</p>\n<p>例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> (**compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,(*compare[<span class=\"number\">0</span>])(x,y));</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the max of a,b is %d\\n\"</span>,(*compare[<span class=\"number\">1</span>])(x,y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*arr[])(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>) = &#123;cmp_min,cmp_max&#125;;</span><br><span class=\"line\">  cmp(a,b,arr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the <span class=\"built_in\">min</span> of a,b is <span class=\"number\">5</span></span><br><span class=\"line\">the <span class=\"built_in\">max</span> of a,b is <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>cmp(int x,int y,int (**compare)(int,int))</code>中声明的函数形参使用了指针的指针，因为我们传入的是是数组的地址，需要先解引用获得数组内的函数地址，所以使用了指针的指针，也可以使用另一种形式：<code>*compare[](int,int)</code>，效果等同；如果我们在传参时使用了数组下标，则可以不用如此声明，直接声明为<code>cmp(int x,int y,int (*compare)(int,int))</code>即可。</p>\n<h2 id=\"指针函数\"><a href=\"#指针函数\" class=\"headerlink\" title=\"指针函数\"></a>指针函数</h2><p>指针函数是个函数，只不过返回值是个指针类型，这也是一个比较简单的概念，就像变量返回一样，指针函数的定义形如<code>*func()</code>。</p>\n","site":{"data":{}},"excerpt":"<p>注：本文中的int型变量为32位，占四个字节。</p>\n<p>本篇内容旨在对指针数组、数组指针、指针函数、函数指针进行总结，也希望能在总结的同时能有更深入的理解。</p>\n<h2 id=\"数组指针\"><a href=\"#数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组指针</h2><p>数组指针顾名思义是个指针，定义形如<code>(*arr)[n]</code>的一个数组指针，由于<code>()</code>的优先级最高，所以定义的是一个指针，这个指针指向含有n个元素的数组。</p>","more":"<!-- more -->\n<p>可以设计一个程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a[<span class=\"number\">3</span>][<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,</span><br><span class=\"line\">                 <span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,</span><br><span class=\"line\">                 <span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*arr)[<span class=\"number\">4</span>] = a;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"arr = %p\\n\"</span>,arr);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a[0][0] = %p\\n\"</span>,&amp;a[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"ADDR(a[0][1]) = %p\\n\"</span>,&amp;a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[1] = %p\\n\"</span>,++arr);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a[1] = %p\\n\"</span>,a[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行程序后输出结果如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = <span class=\"number\">0x7ffefffb8810</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0x7ffefffb8810</span></span><br><span class=\"line\">ADDR(a[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) = <span class=\"number\">0x7ffefffb8814</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">0x7ffefffb8820</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">0x7ffefffb8820</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，初始化了arr后，其值与数组a[][]的首地址相同，而对arr的自增操作则使其值跳跃了整个数组的长度，该操作等同于二维数组a[][]的行地址加1，而进行如果下标操作a[0][1]，该元素的地址相对于a[0][0]只是增加了四个字节，即一个int型变量的长度。</p>\n<p>我们可以很清晰的从下图理解数组指针：<br><img data-src=\"/images/arr_p.jpg\" alt=\"数组指针\"></p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>指针数组的概念就相对简单，指针数组是个数组，只不过内部存的元素都是指针类型，由于<code>[]</code>的优先级要高于<code>*</code>，所以该数组的定义形如<code>*arr[n]</code>。</p>\n<p>例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> *arr[] = &#123;&amp;a,&amp;b&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d,b = %d\\n\"</span>,*(arr[<span class=\"number\">0</span>]),*(arr[<span class=\"number\">1</span>]));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序输出结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>数组指针没有什么难度，只是用数组去存指针而已。</p>\n<h2 id=\"函数指针\"><a href=\"#函数指针\" class=\"headerlink\" title=\"函数指针\"></a>函数指针</h2><p>函数指针其实在编程中相当有用，我们可以将函数的形参声明为函数指针，从而可以将函数的地址传入。</p>\n<p>函数作为参数传递跟变量传递一样有两种方式：值传递，地址传递。但是值传递有一个不好之处在于太占用空间，假设在A函数中声明一个形如B函数的形参，而非形如B函数的函数指针，那么将B函数作为参数传入时，就要分配整个B函数的空间给该参数，而函数指针则只会传入一个地址。那么还有一个问题，在函数内部进行函数调用也是一样，而且不会进行值传递，但是在函数内部进行调用，不够灵活，同一类函数可以实现的功能不一样，形如B函数的函数功能和函数名可能有所不同，而每次调用不同的函数时都要去改变A函数未免太不方便，所以才要把函数地址当作参数进行传入。</p>\n<p>设计一个程序如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (*compare)(x,y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,cmp(a,b,cmp_min));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the <span class=\"built_in\">min</span> of a,b is <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>值得一提的是，函数指针是一个指针，我们不能在声明函数指针的同时进行函数的定义，因为我们只是声明一个指针，我们只能声明一个函数指针，然后用一个定义过的函数去对该指针进行初始化，就像下面这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>) = cmp_min;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,(*compare)(a,b));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果跟上面一样。</p>\n<p>其实函数指针可以和指针数组结合起来使用，我们都知道函数名单独使用其实是一个地址，所以可以将其作为指针存于指针数组中，通过数组对其进行访问。</p>\n<p>例子如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &lt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp_max</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y?x:y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> (**compare)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the min of a,b is %d\\n\"</span>,(*compare[<span class=\"number\">0</span>])(x,y));</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the max of a,b is %d\\n\"</span>,(*compare[<span class=\"number\">1</span>])(x,y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">int</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*arr[])(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>) = &#123;cmp_min,cmp_max&#125;;</span><br><span class=\"line\">  cmp(a,b,arr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the <span class=\"built_in\">min</span> of a,b is <span class=\"number\">5</span></span><br><span class=\"line\">the <span class=\"built_in\">max</span> of a,b is <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>cmp(int x,int y,int (**compare)(int,int))</code>中声明的函数形参使用了指针的指针，因为我们传入的是是数组的地址，需要先解引用获得数组内的函数地址，所以使用了指针的指针，也可以使用另一种形式：<code>*compare[](int,int)</code>，效果等同；如果我们在传参时使用了数组下标，则可以不用如此声明，直接声明为<code>cmp(int x,int y,int (*compare)(int,int))</code>即可。</p>\n<h2 id=\"指针函数\"><a href=\"#指针函数\" class=\"headerlink\" title=\"指针函数\"></a>指针函数</h2><p>指针函数是个函数，只不过返回值是个指针类型，这也是一个比较简单的概念，就像变量返回一样，指针函数的定义形如<code>*func()</code>。</p>"},{"title":"数据结构及算法分析学习笔记","date":"2018-08-25T07:55:58.000Z","_content":"\n# 数据结构的基本概念\n本篇内容旨在对数据结构的基本概念及术语进行介绍，并从全局的角度对数据结构有一个大体的认识。\n\n## 数据结构的基本术语\n\n### 数据的组成\n**数据：**信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。\n<!-- more -->\n<!-- more -->\n**数据项：**构成数据元素不可分割的最小单位。\n\n**数据元素：**数据的基本单位，通常作为一个整体，一个个的数据元素就组成了数据（一个数据元素含有多个数据项）。\n\n**数据对象：**数据的一个子集，它是同一类数据元素的集合。\n\n例如，一个班级可以看作是数据对象，它由一个个学生组成，学生记录可以看作是一类数据元素，学生的学号、姓名、性别可以看成是数据项。\n\n### 数据类型\n\n**原子类型：**其值不可分割的数据类型；\n\n**结构类型：**其值可以分成若干个结构类型或者原子类型的数据类型；\n\n**抽象数据类型：**是指一个数学模型以及定义在模型上的一组操作，其定义仅仅取决于其逻辑特性，而与计算机的内部实现无关。\n\n\n## 数据结构的组成\n数据结构是相互之间存在一种或多种特定关系的数据元素的集合，其包括三个方面：逻辑结构、存储结构以及数据的运算。\n\n**逻辑结构：**数据元素之间的逻辑关系，独立于计算机，跟数据存储无关。\n\n**存储结构：**数据结构在计算机中的表示，包括数据元素的表示和关系的表示，存储结构是逻辑结构用计算机语言的实现，依赖于计算机语言。\n\n**数据的运算：**运算的定义是针对逻辑结构的，指出了运算的功能；运算的实现是针对存储结构的，指出了运算的具体步骤。\n\n### 逻辑结构\n逻辑结构分为：线性结构和非线性结构。\n\n**线性结构：**结构中的数据元素之间只存在一对一的关系，一般线性表、栈和队列、串和数据以及广义表都属于线性结构。\n\n**非线性结构：**结构之中的数据元素之间存在一对多（树）或多对多（图）的关系，树和图属于非线性结构。\n\n集合是一种特殊的逻辑结构，内部数据元素之间除了“同属于一个集合”外没有任何关系，可以被分为非线性结构之中。\n\n### 存储结构\n存储结构可以分为：顺序存储、链式存储、索引存储以及散列存储。\n\n**顺序存储：**把逻辑上相邻的元素存储在物理上也相邻的存储单元中。特点是可以随机存取，每个元素占用的存储空间少；缺点是只能用相邻的整块存储单元，易产生外部碎片。\n\n**链式存储：**逻辑上相邻的元素在物理上不一定相邻，借助存储地址进行访问。优点是不会产生外部碎片；缺点是元素因存储指针会占用额外空间，并且只能顺序存储。\n\n**索引存储：**存储元素信息的同时还要建立附加的索引表（由一个个的索引项（形如 关键字，地址）组成）。优点是检索速度快；缺点是增加了索引表，占用额外空间，增删数据时要同时增删索引项。\n\n**散列（Hash）存储：**通过元素的关键字计算出元素的存储地址。优点是查找、增加及删除元素都很快；缺点是散列函数不好会导致元素存储单元的冲突，事实上任何散列函数都会出现元素存储单元冲突的可能，而解决冲突会增加时间和空间开销。\n\n## 算法的特性、要求及度量\n\n算法是对特定问题求解步骤的一种描述\n\n### 特性\n算法的基本特性：有穷性、确定性、可行性、输入及输出。\n\n### 要求\n算法的要求（目标）：正确性、可读性、健壮性、效率（算法执行的时间）高、存储量（算法执行过程中所需要的最大存储空间）需求低。\n\n### 度量\n算法的度量分为：时间复杂性和空间复杂性。\n\n**时间复杂性：**算法中所有语句的频度（一条语句在算法中被执行的次数）之和称为T(n)，被称为算法问题规模n的函数，时间复杂度即是分析T(n)的数量级。\n\n由于在最深层循环的语句的频度与T(n)同数量级，所以一般通过最深层循环语句的频度f(n)（渐近时间复杂度,也就是该语句执行的次数）来表示时间复杂度。即 T(n) = O(f(n))，”O“为计算数量级。\n\n算法的时间复杂度不仅依赖于问题的规模，也依赖于待输入元素的性质（比如输入元素的初始状态）。\n\n一般以算法的最坏时间复杂度进行讨论。\n\n**常见的渐近时间复杂度：O(1) < O(log2n) < O(n) < O(nlog2n) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)**\n\n**空间复杂性：**算法所耗费的存储空间，也是算法问题规模的函数，记为O(g(n))；\n\n上级程序除了需要存储空间存放本身执行指令、数据外，还需要辅助空间来实现计算及进行操作。\n\n若是输入数据所占空间仅取决于问题本身，和算法无关，就只需要分析除输入和程序之外的额外空间即可。\n\n**算法原地工作：**算法所需额外空间是常量，即O(1)。\n\n## 算法时间复杂度计算方法\n每次在设计算法的时候，我们都要考虑该算法的时间复杂度，从而可以从同一个问题的不同算法中取得相对时间复杂度较低的算法，那么时间复杂度到底如何计算，这就是本文的重点。\n\n### 循环体中的变量和循环条件有关\n\n此类时间复杂度计算只需要通过假设语句的执行次数，根据判断条件即可求出。\n\n例1：\n```C\nint i = 1;\nwhile(i < n) i *= 2;\n```\ni 在循环体中参与计算，但是同样又是while判断的依据，`i *= 2`这条语句的执行次数就是该算法的渐近时间复杂度，设该语句执行了t次，那么就是i在执行过程中乘了t个2，所以i的上限是2^t，所以最终判断条件是 2^t <= n,即t < log2n,这是渐近时间复杂度T(n) = O(log2n)。\n\n例2：\n```C\nint y = 5;\nwhile((y+1) * (y+1) < n) y = y+1;\n```\n`y = y+1`最终会执行t次，所以y值上限为`y = t + 5`，此时有判断条件`(t+6)^2 < n`，所以有`t < n^(1/2) - 6`，渐近时间复杂度T(n) = O(n^(1/2))。\n\n### 循环体中的变量和循环条件无关\n\n此类时间复杂度计算一般采用数学归纳法或者递推法，但又因算法执行的策略不同而有所不同，分为递归和非递归。\n\n**1.递归算法**\n\n对于递归算法，一般采用递推法（迭代法）进行时间复杂度计算。\n\n例3：\n**给出一个递归方程，当`n = 1,T(n) = 1`，当`n > 1,T(n) = 2T(n/2) + n`，其中n为问题的规模，n为2的整数次幂；某算法所需时间由该方程给出，求该算法的时间复杂度阶别。**\n\n可以知道该题直接给出了时间复杂度的递推公式，所以设`n = 2^k`，则有`T(2^k) = 2T(2^(k-1)) + 2^k = (2^2)T(2^(k-2)) + 2 *(2^k) = (2^k)T(1) + k *(2^k) = (k + 1) * (2^k)`，即`T(n) = (log2n + 1) * n`，渐近时间复杂度为O(nlog2n)。\n\n\n\n**2.非递归算法**\n\n非递归算法的时间复杂度计算较为简单，直接累计最深层语句的执行次数就行。\n\n例4：\n```C\nfor(i=0;i<n;i++)\n  for(j=0;j<m;j++)\n    a[i][j] = 0;\n```\n\n时间复杂度T(n) = O(n*m)\n\n未完待续。。。\n\n## 小结\n\n### 数据结构的组织逻辑图：\n\n![数据结构](/images/DataStructure.jpg)\n\n\n# 一般线性表\n线性表是数据结构中最简单的逻辑结构，其特点为一对一，即**线性表中除表头和表位外的每个元素，都有且只有一个直接前驱和一个直接后继，而表头元素只有一个直接后继，没有直接前驱；表尾元素只有一个直接前驱，而无直接后继因此，表中各元素是由先后顺序的**。\n\n注1：线性表中的各元素都属于同一数据类型，故而占用相同的存储空间，除此之外，线性表长度有限。\n\n注2：本文对不同存储结构的算法实现都包括：线性表的创建、插入元素、删除元素、查找元素，在本篇中的查找算法使用的都是简单查找，其余查找算法将会由另外的一篇文章给出。\n\n已经从逻辑结构上介绍了线性表的基本概念，也就是该结构中元素之间的相邻关系，接着就要讨论该如何实现该逻辑结构，这就引出了存储结构的概念。存储结构解决的是线性表在物理上如何存储的问题，线性表的存储结构决定了算法的实现方法，本文将要讨论的是线性表的顺序存储和链式存储。\n\n## 顺序存储\n\n### 基本概念\n\n顺序存储又被称为顺序表，它利用一组地址连续的存储单元依次存储线性表中的数据元素，特点是**逻辑上相邻的数据元素在物理上也连续，所以顺序表中的元素可以通过首地址和元素序号进行随机访问，时间复杂度为`O(1)`，但是插入和删除操作都要移动大量元素**。\n\n顺序表的存储结构可以用下图表示：\n![数组指针](/images/arr_list.jpg)\n\n### 静态顺序表\n\n静态顺序表又可以被称为数组，数组的大小和空间在定义后就固定不变，这种内存分配方式被称为静态分配。\n\n**静态顺序表的创建：**\n```C\nvoid InitList(SqList *L)\n{\n  L->length = 0;\n  for(int i= 0;i < MAXSIZE;i++)\n  {\n    L->data[i] = (Elemtype)i;\n    L->length++;\n  }\n  printf(\"length is %d\\n\",L->length);\n}\n```\n**静态顺序表的插入：**\n```C\nbool ListInsert(SqList *L,int i,Elemtype e)\n{\n  if(i < 1 || i > L->length + 1) return false; //the scope of i needs to be suitable.\n  if(L->length >= MAXSIZE) return false; //the length can't more than MAXSIZE.\n  for(int j = L->length;j >= i;j--)\n  {\n    L->data[j] = L->data[j-1];\n  }\n  L->data[i-1] = e;\n  L->length++;\n  return true;\n}\n```\n**静态顺序表的删除：**\n```C\nbool ListDelete(SqList *L,int i,Elemtype *e)\n{\n  if(i < 1 || i > L->length) return false; //the scope of i needs to be suitable.\n  if(L->length <= 0) return false; //the length can't less than one.\n  *e = L->data[i-1];\n  for(int j = i;j < L->length;j++)\n  {\n    L->data[j-1] = L->data[j];\n  }\n  L->length--;\n  return true;\n}\n```\n**静态顺序表的查找：**\n```C\n//search the item appears in L for the first time.\nint ListSearch(SqList *L,Elemtype e)\n{\n  for(int i = 0;i < L->length;i++)\n  {\n    if(L->data[i] == e) return (i+1);\n  }\n  return false;\n}\n```\n\n静态顺序表的实现较为简单，源码路径为\n### 动态线性表\n\n\n# \n","source":"_posts/数据结构及算法分析学习笔记.md","raw":"---\ntitle: 数据结构及算法分析学习笔记\ndate: 2018-08-25 15:55:58\ntags: 数据结构及算法\ncategories: 数据结构及算法\n---\n\n# 数据结构的基本概念\n本篇内容旨在对数据结构的基本概念及术语进行介绍，并从全局的角度对数据结构有一个大体的认识。\n\n## 数据结构的基本术语\n\n### 数据的组成\n**数据：**信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。\n<!-- more -->\n<!-- more -->\n**数据项：**构成数据元素不可分割的最小单位。\n\n**数据元素：**数据的基本单位，通常作为一个整体，一个个的数据元素就组成了数据（一个数据元素含有多个数据项）。\n\n**数据对象：**数据的一个子集，它是同一类数据元素的集合。\n\n例如，一个班级可以看作是数据对象，它由一个个学生组成，学生记录可以看作是一类数据元素，学生的学号、姓名、性别可以看成是数据项。\n\n### 数据类型\n\n**原子类型：**其值不可分割的数据类型；\n\n**结构类型：**其值可以分成若干个结构类型或者原子类型的数据类型；\n\n**抽象数据类型：**是指一个数学模型以及定义在模型上的一组操作，其定义仅仅取决于其逻辑特性，而与计算机的内部实现无关。\n\n\n## 数据结构的组成\n数据结构是相互之间存在一种或多种特定关系的数据元素的集合，其包括三个方面：逻辑结构、存储结构以及数据的运算。\n\n**逻辑结构：**数据元素之间的逻辑关系，独立于计算机，跟数据存储无关。\n\n**存储结构：**数据结构在计算机中的表示，包括数据元素的表示和关系的表示，存储结构是逻辑结构用计算机语言的实现，依赖于计算机语言。\n\n**数据的运算：**运算的定义是针对逻辑结构的，指出了运算的功能；运算的实现是针对存储结构的，指出了运算的具体步骤。\n\n### 逻辑结构\n逻辑结构分为：线性结构和非线性结构。\n\n**线性结构：**结构中的数据元素之间只存在一对一的关系，一般线性表、栈和队列、串和数据以及广义表都属于线性结构。\n\n**非线性结构：**结构之中的数据元素之间存在一对多（树）或多对多（图）的关系，树和图属于非线性结构。\n\n集合是一种特殊的逻辑结构，内部数据元素之间除了“同属于一个集合”外没有任何关系，可以被分为非线性结构之中。\n\n### 存储结构\n存储结构可以分为：顺序存储、链式存储、索引存储以及散列存储。\n\n**顺序存储：**把逻辑上相邻的元素存储在物理上也相邻的存储单元中。特点是可以随机存取，每个元素占用的存储空间少；缺点是只能用相邻的整块存储单元，易产生外部碎片。\n\n**链式存储：**逻辑上相邻的元素在物理上不一定相邻，借助存储地址进行访问。优点是不会产生外部碎片；缺点是元素因存储指针会占用额外空间，并且只能顺序存储。\n\n**索引存储：**存储元素信息的同时还要建立附加的索引表（由一个个的索引项（形如 关键字，地址）组成）。优点是检索速度快；缺点是增加了索引表，占用额外空间，增删数据时要同时增删索引项。\n\n**散列（Hash）存储：**通过元素的关键字计算出元素的存储地址。优点是查找、增加及删除元素都很快；缺点是散列函数不好会导致元素存储单元的冲突，事实上任何散列函数都会出现元素存储单元冲突的可能，而解决冲突会增加时间和空间开销。\n\n## 算法的特性、要求及度量\n\n算法是对特定问题求解步骤的一种描述\n\n### 特性\n算法的基本特性：有穷性、确定性、可行性、输入及输出。\n\n### 要求\n算法的要求（目标）：正确性、可读性、健壮性、效率（算法执行的时间）高、存储量（算法执行过程中所需要的最大存储空间）需求低。\n\n### 度量\n算法的度量分为：时间复杂性和空间复杂性。\n\n**时间复杂性：**算法中所有语句的频度（一条语句在算法中被执行的次数）之和称为T(n)，被称为算法问题规模n的函数，时间复杂度即是分析T(n)的数量级。\n\n由于在最深层循环的语句的频度与T(n)同数量级，所以一般通过最深层循环语句的频度f(n)（渐近时间复杂度,也就是该语句执行的次数）来表示时间复杂度。即 T(n) = O(f(n))，”O“为计算数量级。\n\n算法的时间复杂度不仅依赖于问题的规模，也依赖于待输入元素的性质（比如输入元素的初始状态）。\n\n一般以算法的最坏时间复杂度进行讨论。\n\n**常见的渐近时间复杂度：O(1) < O(log2n) < O(n) < O(nlog2n) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n)**\n\n**空间复杂性：**算法所耗费的存储空间，也是算法问题规模的函数，记为O(g(n))；\n\n上级程序除了需要存储空间存放本身执行指令、数据外，还需要辅助空间来实现计算及进行操作。\n\n若是输入数据所占空间仅取决于问题本身，和算法无关，就只需要分析除输入和程序之外的额外空间即可。\n\n**算法原地工作：**算法所需额外空间是常量，即O(1)。\n\n## 算法时间复杂度计算方法\n每次在设计算法的时候，我们都要考虑该算法的时间复杂度，从而可以从同一个问题的不同算法中取得相对时间复杂度较低的算法，那么时间复杂度到底如何计算，这就是本文的重点。\n\n### 循环体中的变量和循环条件有关\n\n此类时间复杂度计算只需要通过假设语句的执行次数，根据判断条件即可求出。\n\n例1：\n```C\nint i = 1;\nwhile(i < n) i *= 2;\n```\ni 在循环体中参与计算，但是同样又是while判断的依据，`i *= 2`这条语句的执行次数就是该算法的渐近时间复杂度，设该语句执行了t次，那么就是i在执行过程中乘了t个2，所以i的上限是2^t，所以最终判断条件是 2^t <= n,即t < log2n,这是渐近时间复杂度T(n) = O(log2n)。\n\n例2：\n```C\nint y = 5;\nwhile((y+1) * (y+1) < n) y = y+1;\n```\n`y = y+1`最终会执行t次，所以y值上限为`y = t + 5`，此时有判断条件`(t+6)^2 < n`，所以有`t < n^(1/2) - 6`，渐近时间复杂度T(n) = O(n^(1/2))。\n\n### 循环体中的变量和循环条件无关\n\n此类时间复杂度计算一般采用数学归纳法或者递推法，但又因算法执行的策略不同而有所不同，分为递归和非递归。\n\n**1.递归算法**\n\n对于递归算法，一般采用递推法（迭代法）进行时间复杂度计算。\n\n例3：\n**给出一个递归方程，当`n = 1,T(n) = 1`，当`n > 1,T(n) = 2T(n/2) + n`，其中n为问题的规模，n为2的整数次幂；某算法所需时间由该方程给出，求该算法的时间复杂度阶别。**\n\n可以知道该题直接给出了时间复杂度的递推公式，所以设`n = 2^k`，则有`T(2^k) = 2T(2^(k-1)) + 2^k = (2^2)T(2^(k-2)) + 2 *(2^k) = (2^k)T(1) + k *(2^k) = (k + 1) * (2^k)`，即`T(n) = (log2n + 1) * n`，渐近时间复杂度为O(nlog2n)。\n\n\n\n**2.非递归算法**\n\n非递归算法的时间复杂度计算较为简单，直接累计最深层语句的执行次数就行。\n\n例4：\n```C\nfor(i=0;i<n;i++)\n  for(j=0;j<m;j++)\n    a[i][j] = 0;\n```\n\n时间复杂度T(n) = O(n*m)\n\n未完待续。。。\n\n## 小结\n\n### 数据结构的组织逻辑图：\n\n![数据结构](/images/DataStructure.jpg)\n\n\n# 一般线性表\n线性表是数据结构中最简单的逻辑结构，其特点为一对一，即**线性表中除表头和表位外的每个元素，都有且只有一个直接前驱和一个直接后继，而表头元素只有一个直接后继，没有直接前驱；表尾元素只有一个直接前驱，而无直接后继因此，表中各元素是由先后顺序的**。\n\n注1：线性表中的各元素都属于同一数据类型，故而占用相同的存储空间，除此之外，线性表长度有限。\n\n注2：本文对不同存储结构的算法实现都包括：线性表的创建、插入元素、删除元素、查找元素，在本篇中的查找算法使用的都是简单查找，其余查找算法将会由另外的一篇文章给出。\n\n已经从逻辑结构上介绍了线性表的基本概念，也就是该结构中元素之间的相邻关系，接着就要讨论该如何实现该逻辑结构，这就引出了存储结构的概念。存储结构解决的是线性表在物理上如何存储的问题，线性表的存储结构决定了算法的实现方法，本文将要讨论的是线性表的顺序存储和链式存储。\n\n## 顺序存储\n\n### 基本概念\n\n顺序存储又被称为顺序表，它利用一组地址连续的存储单元依次存储线性表中的数据元素，特点是**逻辑上相邻的数据元素在物理上也连续，所以顺序表中的元素可以通过首地址和元素序号进行随机访问，时间复杂度为`O(1)`，但是插入和删除操作都要移动大量元素**。\n\n顺序表的存储结构可以用下图表示：\n![数组指针](/images/arr_list.jpg)\n\n### 静态顺序表\n\n静态顺序表又可以被称为数组，数组的大小和空间在定义后就固定不变，这种内存分配方式被称为静态分配。\n\n**静态顺序表的创建：**\n```C\nvoid InitList(SqList *L)\n{\n  L->length = 0;\n  for(int i= 0;i < MAXSIZE;i++)\n  {\n    L->data[i] = (Elemtype)i;\n    L->length++;\n  }\n  printf(\"length is %d\\n\",L->length);\n}\n```\n**静态顺序表的插入：**\n```C\nbool ListInsert(SqList *L,int i,Elemtype e)\n{\n  if(i < 1 || i > L->length + 1) return false; //the scope of i needs to be suitable.\n  if(L->length >= MAXSIZE) return false; //the length can't more than MAXSIZE.\n  for(int j = L->length;j >= i;j--)\n  {\n    L->data[j] = L->data[j-1];\n  }\n  L->data[i-1] = e;\n  L->length++;\n  return true;\n}\n```\n**静态顺序表的删除：**\n```C\nbool ListDelete(SqList *L,int i,Elemtype *e)\n{\n  if(i < 1 || i > L->length) return false; //the scope of i needs to be suitable.\n  if(L->length <= 0) return false; //the length can't less than one.\n  *e = L->data[i-1];\n  for(int j = i;j < L->length;j++)\n  {\n    L->data[j-1] = L->data[j];\n  }\n  L->length--;\n  return true;\n}\n```\n**静态顺序表的查找：**\n```C\n//search the item appears in L for the first time.\nint ListSearch(SqList *L,Elemtype e)\n{\n  for(int i = 0;i < L->length;i++)\n  {\n    if(L->data[i] == e) return (i+1);\n  }\n  return false;\n}\n```\n\n静态顺序表的实现较为简单，源码路径为\n### 动态线性表\n\n\n# \n","slug":"数据结构及算法分析学习笔记","published":1,"updated":"2020-08-12T15:43:21.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30mr000nvkv9dv218ici","content":"<h1 id=\"数据结构的基本概念\"><a href=\"#数据结构的基本概念\" class=\"headerlink\" title=\"数据结构的基本概念\"></a>数据结构的基本概念</h1><p>本篇内容旨在对数据结构的基本概念及术语进行介绍，并从全局的角度对数据结构有一个大体的认识。</p>\n<h2 id=\"数据结构的基本术语\"><a href=\"#数据结构的基本术语\" class=\"headerlink\" title=\"数据结构的基本术语\"></a>数据结构的基本术语</h2><h3 id=\"数据的组成\"><a href=\"#数据的组成\" class=\"headerlink\" title=\"数据的组成\"></a>数据的组成</h3><p><strong>数据：</strong>信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。</p>\n<a id=\"more\"></a>\n<!-- more -->\n<p><strong>数据项：</strong>构成数据元素不可分割的最小单位。</p>\n<p><strong>数据元素：</strong>数据的基本单位，通常作为一个整体，一个个的数据元素就组成了数据（一个数据元素含有多个数据项）。</p>\n<p><strong>数据对象：</strong>数据的一个子集，它是同一类数据元素的集合。</p>\n<p>例如，一个班级可以看作是数据对象，它由一个个学生组成，学生记录可以看作是一类数据元素，学生的学号、姓名、性别可以看成是数据项。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><strong>原子类型：</strong>其值不可分割的数据类型；</p>\n<p><strong>结构类型：</strong>其值可以分成若干个结构类型或者原子类型的数据类型；</p>\n<p><strong>抽象数据类型：</strong>是指一个数学模型以及定义在模型上的一组操作，其定义仅仅取决于其逻辑特性，而与计算机的内部实现无关。</p>\n<h2 id=\"数据结构的组成\"><a href=\"#数据结构的组成\" class=\"headerlink\" title=\"数据结构的组成\"></a>数据结构的组成</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合，其包括三个方面：逻辑结构、存储结构以及数据的运算。</p>\n<p><strong>逻辑结构：</strong>数据元素之间的逻辑关系，独立于计算机，跟数据存储无关。</p>\n<p><strong>存储结构：</strong>数据结构在计算机中的表示，包括数据元素的表示和关系的表示，存储结构是逻辑结构用计算机语言的实现，依赖于计算机语言。</p>\n<p><strong>数据的运算：</strong>运算的定义是针对逻辑结构的，指出了运算的功能；运算的实现是针对存储结构的，指出了运算的具体步骤。</p>\n<h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p>逻辑结构分为：线性结构和非线性结构。</p>\n<p><strong>线性结构：</strong>结构中的数据元素之间只存在一对一的关系，一般线性表、栈和队列、串和数据以及广义表都属于线性结构。</p>\n<p><strong>非线性结构：</strong>结构之中的数据元素之间存在一对多（树）或多对多（图）的关系，树和图属于非线性结构。</p>\n<p>集合是一种特殊的逻辑结构，内部数据元素之间除了“同属于一个集合”外没有任何关系，可以被分为非线性结构之中。</p>\n<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><p>存储结构可以分为：顺序存储、链式存储、索引存储以及散列存储。</p>\n<p><strong>顺序存储：</strong>把逻辑上相邻的元素存储在物理上也相邻的存储单元中。特点是可以随机存取，每个元素占用的存储空间少；缺点是只能用相邻的整块存储单元，易产生外部碎片。</p>\n<p><strong>链式存储：</strong>逻辑上相邻的元素在物理上不一定相邻，借助存储地址进行访问。优点是不会产生外部碎片；缺点是元素因存储指针会占用额外空间，并且只能顺序存储。</p>\n<p><strong>索引存储：</strong>存储元素信息的同时还要建立附加的索引表（由一个个的索引项（形如 关键字，地址）组成）。优点是检索速度快；缺点是增加了索引表，占用额外空间，增删数据时要同时增删索引项。</p>\n<p><strong>散列（Hash）存储：</strong>通过元素的关键字计算出元素的存储地址。优点是查找、增加及删除元素都很快；缺点是散列函数不好会导致元素存储单元的冲突，事实上任何散列函数都会出现元素存储单元冲突的可能，而解决冲突会增加时间和空间开销。</p>\n<h2 id=\"算法的特性、要求及度量\"><a href=\"#算法的特性、要求及度量\" class=\"headerlink\" title=\"算法的特性、要求及度量\"></a>算法的特性、要求及度量</h2><p>算法是对特定问题求解步骤的一种描述</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>算法的基本特性：有穷性、确定性、可行性、输入及输出。</p>\n<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>算法的要求（目标）：正确性、可读性、健壮性、效率（算法执行的时间）高、存储量（算法执行过程中所需要的最大存储空间）需求低。</p>\n<h3 id=\"度量\"><a href=\"#度量\" class=\"headerlink\" title=\"度量\"></a>度量</h3><p>算法的度量分为：时间复杂性和空间复杂性。</p>\n<p><strong>时间复杂性：</strong>算法中所有语句的频度（一条语句在算法中被执行的次数）之和称为T(n)，被称为算法问题规模n的函数，时间复杂度即是分析T(n)的数量级。</p>\n<p>由于在最深层循环的语句的频度与T(n)同数量级，所以一般通过最深层循环语句的频度f(n)（渐近时间复杂度,也就是该语句执行的次数）来表示时间复杂度。即 T(n) = O(f(n))，”O“为计算数量级。</p>\n<p>算法的时间复杂度不仅依赖于问题的规模，也依赖于待输入元素的性质（比如输入元素的初始状态）。</p>\n<p>一般以算法的最坏时间复杂度进行讨论。</p>\n<p><strong>常见的渐近时间复杂度：O(1) &lt; O(log2n) &lt; O(n) &lt; O(nlog2n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p>\n<p><strong>空间复杂性：</strong>算法所耗费的存储空间，也是算法问题规模的函数，记为O(g(n))；</p>\n<p>上级程序除了需要存储空间存放本身执行指令、数据外，还需要辅助空间来实现计算及进行操作。</p>\n<p>若是输入数据所占空间仅取决于问题本身，和算法无关，就只需要分析除输入和程序之外的额外空间即可。</p>\n<p><strong>算法原地工作：</strong>算法所需额外空间是常量，即O(1)。</p>\n<h2 id=\"算法时间复杂度计算方法\"><a href=\"#算法时间复杂度计算方法\" class=\"headerlink\" title=\"算法时间复杂度计算方法\"></a>算法时间复杂度计算方法</h2><p>每次在设计算法的时候，我们都要考虑该算法的时间复杂度，从而可以从同一个问题的不同算法中取得相对时间复杂度较低的算法，那么时间复杂度到底如何计算，这就是本文的重点。</p>\n<h3 id=\"循环体中的变量和循环条件有关\"><a href=\"#循环体中的变量和循环条件有关\" class=\"headerlink\" title=\"循环体中的变量和循环条件有关\"></a>循环体中的变量和循环条件有关</h3><p>此类时间复杂度计算只需要通过假设语句的执行次数，根据判断条件即可求出。</p>\n<p>例1：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; n) i *= <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>i 在循环体中参与计算，但是同样又是while判断的依据，<code>i *= 2</code>这条语句的执行次数就是该算法的渐近时间复杂度，设该语句执行了t次，那么就是i在执行过程中乘了t个2，所以i的上限是2^t，所以最终判断条件是 2^t &lt;= n,即t &lt; log2n,这是渐近时间复杂度T(n) = O(log2n)。</p>\n<p>例2：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>((y+<span class=\"number\">1</span>) * (y+<span class=\"number\">1</span>) &lt; n) y = y+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><code>y = y+1</code>最终会执行t次，所以y值上限为<code>y = t + 5</code>，此时有判断条件<code>(t+6)^2 &lt; n</code>，所以有<code>t &lt; n^(1/2) - 6</code>，渐近时间复杂度T(n) = O(n^(1/2))。</p>\n<h3 id=\"循环体中的变量和循环条件无关\"><a href=\"#循环体中的变量和循环条件无关\" class=\"headerlink\" title=\"循环体中的变量和循环条件无关\"></a>循环体中的变量和循环条件无关</h3><p>此类时间复杂度计算一般采用数学归纳法或者递推法，但又因算法执行的策略不同而有所不同，分为递归和非递归。</p>\n<p><strong>1.递归算法</strong></p>\n<p>对于递归算法，一般采用递推法（迭代法）进行时间复杂度计算。</p>\n<p>例3：<br><strong>给出一个递归方程，当<code>n = 1,T(n) = 1</code>，当<code>n &gt; 1,T(n) = 2T(n/2) + n</code>，其中n为问题的规模，n为2的整数次幂；某算法所需时间由该方程给出，求该算法的时间复杂度阶别。</strong></p>\n<p>可以知道该题直接给出了时间复杂度的递推公式，所以设<code>n = 2^k</code>，则有<code>T(2^k) = 2T(2^(k-1)) + 2^k = (2^2)T(2^(k-2)) + 2 *(2^k) = (2^k)T(1) + k *(2^k) = (k + 1) * (2^k)</code>，即<code>T(n) = (log2n + 1) * n</code>，渐近时间复杂度为O(nlog2n)。</p>\n<p><strong>2.非递归算法</strong></p>\n<p>非递归算法的时间复杂度计算较为简单，直接累计最深层语句的执行次数就行。</p>\n<p>例4：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">    a[i][j] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度T(n) = O(n*m)</p>\n<p>未完待续。。。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"数据结构的组织逻辑图：\"><a href=\"#数据结构的组织逻辑图：\" class=\"headerlink\" title=\"数据结构的组织逻辑图：\"></a>数据结构的组织逻辑图：</h3><p><img data-src=\"/images/DataStructure.jpg\" alt=\"数据结构\"></p>\n<h1 id=\"一般线性表\"><a href=\"#一般线性表\" class=\"headerlink\" title=\"一般线性表\"></a>一般线性表</h1><p>线性表是数据结构中最简单的逻辑结构，其特点为一对一，即<strong>线性表中除表头和表位外的每个元素，都有且只有一个直接前驱和一个直接后继，而表头元素只有一个直接后继，没有直接前驱；表尾元素只有一个直接前驱，而无直接后继因此，表中各元素是由先后顺序的</strong>。</p>\n<p>注1：线性表中的各元素都属于同一数据类型，故而占用相同的存储空间，除此之外，线性表长度有限。</p>\n<p>注2：本文对不同存储结构的算法实现都包括：线性表的创建、插入元素、删除元素、查找元素，在本篇中的查找算法使用的都是简单查找，其余查找算法将会由另外的一篇文章给出。</p>\n<p>已经从逻辑结构上介绍了线性表的基本概念，也就是该结构中元素之间的相邻关系，接着就要讨论该如何实现该逻辑结构，这就引出了存储结构的概念。存储结构解决的是线性表在物理上如何存储的问题，线性表的存储结构决定了算法的实现方法，本文将要讨论的是线性表的顺序存储和链式存储。</p>\n<h2 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>顺序存储又被称为顺序表，它利用一组地址连续的存储单元依次存储线性表中的数据元素，特点是<strong>逻辑上相邻的数据元素在物理上也连续，所以顺序表中的元素可以通过首地址和元素序号进行随机访问，时间复杂度为<code>O(1)</code>，但是插入和删除操作都要移动大量元素</strong>。</p>\n<p>顺序表的存储结构可以用下图表示：<br><img data-src=\"/images/arr_list.jpg\" alt=\"数组指针\"></p>\n<h3 id=\"静态顺序表\"><a href=\"#静态顺序表\" class=\"headerlink\" title=\"静态顺序表\"></a>静态顺序表</h3><p>静态顺序表又可以被称为数组，数组的大小和空间在定义后就固定不变，这种内存分配方式被称为静态分配。</p>\n<p><strong>静态顺序表的创建：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SqList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  L-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>;i &lt; MAXSIZE;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[i] = (Elemtype)i;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"length is %d\\n\"</span>,L-&gt;length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的插入：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"keyword\">int</span> i,Elemtype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the scope of i needs to be suitable.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(L-&gt;length &gt;= MAXSIZE) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the length can't more than MAXSIZE.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = L-&gt;length;j &gt;= i;j--)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[j] = L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L-&gt;data[i<span class=\"number\">-1</span>] = e;</span><br><span class=\"line\">  L-&gt;length++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的删除：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"keyword\">int</span> i,Elemtype *e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the scope of i needs to be suitable.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(L-&gt;length &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the length can't less than one.</span></span><br><span class=\"line\">  *e = L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i;j &lt; L-&gt;length;j++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[j<span class=\"number\">-1</span>] = L-&gt;data[j];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L-&gt;length--;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的查找：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//search the item appears in L for the first time.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ListSearch</span><span class=\"params\">(SqList *L,Elemtype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; L-&gt;length;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;data[i] == e) <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态顺序表的实现较为简单，源码路径为</p>\n<h3 id=\"动态线性表\"><a href=\"#动态线性表\" class=\"headerlink\" title=\"动态线性表\"></a>动态线性表</h3><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{}},"excerpt":"<h1 id=\"数据结构的基本概念\"><a href=\"#数据结构的基本概念\" class=\"headerlink\" title=\"数据结构的基本概念\"></a>数据结构的基本概念</h1><p>本篇内容旨在对数据结构的基本概念及术语进行介绍，并从全局的角度对数据结构有一个大体的认识。</p>\n<h2 id=\"数据结构的基本术语\"><a href=\"#数据结构的基本术语\" class=\"headerlink\" title=\"数据结构的基本术语\"></a>数据结构的基本术语</h2><h3 id=\"数据的组成\"><a href=\"#数据的组成\" class=\"headerlink\" title=\"数据的组成\"></a>数据的组成</h3><p><strong>数据：</strong>信息的载体，是描述客观事物属性的数、字符以及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。</p>","more":"<!-- more -->\n<p><strong>数据项：</strong>构成数据元素不可分割的最小单位。</p>\n<p><strong>数据元素：</strong>数据的基本单位，通常作为一个整体，一个个的数据元素就组成了数据（一个数据元素含有多个数据项）。</p>\n<p><strong>数据对象：</strong>数据的一个子集，它是同一类数据元素的集合。</p>\n<p>例如，一个班级可以看作是数据对象，它由一个个学生组成，学生记录可以看作是一类数据元素，学生的学号、姓名、性别可以看成是数据项。</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><strong>原子类型：</strong>其值不可分割的数据类型；</p>\n<p><strong>结构类型：</strong>其值可以分成若干个结构类型或者原子类型的数据类型；</p>\n<p><strong>抽象数据类型：</strong>是指一个数学模型以及定义在模型上的一组操作，其定义仅仅取决于其逻辑特性，而与计算机的内部实现无关。</p>\n<h2 id=\"数据结构的组成\"><a href=\"#数据结构的组成\" class=\"headerlink\" title=\"数据结构的组成\"></a>数据结构的组成</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合，其包括三个方面：逻辑结构、存储结构以及数据的运算。</p>\n<p><strong>逻辑结构：</strong>数据元素之间的逻辑关系，独立于计算机，跟数据存储无关。</p>\n<p><strong>存储结构：</strong>数据结构在计算机中的表示，包括数据元素的表示和关系的表示，存储结构是逻辑结构用计算机语言的实现，依赖于计算机语言。</p>\n<p><strong>数据的运算：</strong>运算的定义是针对逻辑结构的，指出了运算的功能；运算的实现是针对存储结构的，指出了运算的具体步骤。</p>\n<h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p>逻辑结构分为：线性结构和非线性结构。</p>\n<p><strong>线性结构：</strong>结构中的数据元素之间只存在一对一的关系，一般线性表、栈和队列、串和数据以及广义表都属于线性结构。</p>\n<p><strong>非线性结构：</strong>结构之中的数据元素之间存在一对多（树）或多对多（图）的关系，树和图属于非线性结构。</p>\n<p>集合是一种特殊的逻辑结构，内部数据元素之间除了“同属于一个集合”外没有任何关系，可以被分为非线性结构之中。</p>\n<h3 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h3><p>存储结构可以分为：顺序存储、链式存储、索引存储以及散列存储。</p>\n<p><strong>顺序存储：</strong>把逻辑上相邻的元素存储在物理上也相邻的存储单元中。特点是可以随机存取，每个元素占用的存储空间少；缺点是只能用相邻的整块存储单元，易产生外部碎片。</p>\n<p><strong>链式存储：</strong>逻辑上相邻的元素在物理上不一定相邻，借助存储地址进行访问。优点是不会产生外部碎片；缺点是元素因存储指针会占用额外空间，并且只能顺序存储。</p>\n<p><strong>索引存储：</strong>存储元素信息的同时还要建立附加的索引表（由一个个的索引项（形如 关键字，地址）组成）。优点是检索速度快；缺点是增加了索引表，占用额外空间，增删数据时要同时增删索引项。</p>\n<p><strong>散列（Hash）存储：</strong>通过元素的关键字计算出元素的存储地址。优点是查找、增加及删除元素都很快；缺点是散列函数不好会导致元素存储单元的冲突，事实上任何散列函数都会出现元素存储单元冲突的可能，而解决冲突会增加时间和空间开销。</p>\n<h2 id=\"算法的特性、要求及度量\"><a href=\"#算法的特性、要求及度量\" class=\"headerlink\" title=\"算法的特性、要求及度量\"></a>算法的特性、要求及度量</h2><p>算法是对特定问题求解步骤的一种描述</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>算法的基本特性：有穷性、确定性、可行性、输入及输出。</p>\n<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>算法的要求（目标）：正确性、可读性、健壮性、效率（算法执行的时间）高、存储量（算法执行过程中所需要的最大存储空间）需求低。</p>\n<h3 id=\"度量\"><a href=\"#度量\" class=\"headerlink\" title=\"度量\"></a>度量</h3><p>算法的度量分为：时间复杂性和空间复杂性。</p>\n<p><strong>时间复杂性：</strong>算法中所有语句的频度（一条语句在算法中被执行的次数）之和称为T(n)，被称为算法问题规模n的函数，时间复杂度即是分析T(n)的数量级。</p>\n<p>由于在最深层循环的语句的频度与T(n)同数量级，所以一般通过最深层循环语句的频度f(n)（渐近时间复杂度,也就是该语句执行的次数）来表示时间复杂度。即 T(n) = O(f(n))，”O“为计算数量级。</p>\n<p>算法的时间复杂度不仅依赖于问题的规模，也依赖于待输入元素的性质（比如输入元素的初始状态）。</p>\n<p>一般以算法的最坏时间复杂度进行讨论。</p>\n<p><strong>常见的渐近时间复杂度：O(1) &lt; O(log2n) &lt; O(n) &lt; O(nlog2n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p>\n<p><strong>空间复杂性：</strong>算法所耗费的存储空间，也是算法问题规模的函数，记为O(g(n))；</p>\n<p>上级程序除了需要存储空间存放本身执行指令、数据外，还需要辅助空间来实现计算及进行操作。</p>\n<p>若是输入数据所占空间仅取决于问题本身，和算法无关，就只需要分析除输入和程序之外的额外空间即可。</p>\n<p><strong>算法原地工作：</strong>算法所需额外空间是常量，即O(1)。</p>\n<h2 id=\"算法时间复杂度计算方法\"><a href=\"#算法时间复杂度计算方法\" class=\"headerlink\" title=\"算法时间复杂度计算方法\"></a>算法时间复杂度计算方法</h2><p>每次在设计算法的时候，我们都要考虑该算法的时间复杂度，从而可以从同一个问题的不同算法中取得相对时间复杂度较低的算法，那么时间复杂度到底如何计算，这就是本文的重点。</p>\n<h3 id=\"循环体中的变量和循环条件有关\"><a href=\"#循环体中的变量和循环条件有关\" class=\"headerlink\" title=\"循环体中的变量和循环条件有关\"></a>循环体中的变量和循环条件有关</h3><p>此类时间复杂度计算只需要通过假设语句的执行次数，根据判断条件即可求出。</p>\n<p>例1：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i &lt; n) i *= <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>i 在循环体中参与计算，但是同样又是while判断的依据，<code>i *= 2</code>这条语句的执行次数就是该算法的渐近时间复杂度，设该语句执行了t次，那么就是i在执行过程中乘了t个2，所以i的上限是2^t，所以最终判断条件是 2^t &lt;= n,即t &lt; log2n,这是渐近时间复杂度T(n) = O(log2n)。</p>\n<p>例2：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>((y+<span class=\"number\">1</span>) * (y+<span class=\"number\">1</span>) &lt; n) y = y+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p><code>y = y+1</code>最终会执行t次，所以y值上限为<code>y = t + 5</code>，此时有判断条件<code>(t+6)^2 &lt; n</code>，所以有<code>t &lt; n^(1/2) - 6</code>，渐近时间复杂度T(n) = O(n^(1/2))。</p>\n<h3 id=\"循环体中的变量和循环条件无关\"><a href=\"#循环体中的变量和循环条件无关\" class=\"headerlink\" title=\"循环体中的变量和循环条件无关\"></a>循环体中的变量和循环条件无关</h3><p>此类时间复杂度计算一般采用数学归纳法或者递推法，但又因算法执行的策略不同而有所不同，分为递归和非递归。</p>\n<p><strong>1.递归算法</strong></p>\n<p>对于递归算法，一般采用递推法（迭代法）进行时间复杂度计算。</p>\n<p>例3：<br><strong>给出一个递归方程，当<code>n = 1,T(n) = 1</code>，当<code>n &gt; 1,T(n) = 2T(n/2) + n</code>，其中n为问题的规模，n为2的整数次幂；某算法所需时间由该方程给出，求该算法的时间复杂度阶别。</strong></p>\n<p>可以知道该题直接给出了时间复杂度的递推公式，所以设<code>n = 2^k</code>，则有<code>T(2^k) = 2T(2^(k-1)) + 2^k = (2^2)T(2^(k-2)) + 2 *(2^k) = (2^k)T(1) + k *(2^k) = (k + 1) * (2^k)</code>，即<code>T(n) = (log2n + 1) * n</code>，渐近时间复杂度为O(nlog2n)。</p>\n<p><strong>2.非递归算法</strong></p>\n<p>非递归算法的时间复杂度计算较为简单，直接累计最深层语句的执行次数就行。</p>\n<p>例4：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;m;j++)</span><br><span class=\"line\">    a[i][j] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度T(n) = O(n*m)</p>\n<p>未完待续。。。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><h3 id=\"数据结构的组织逻辑图：\"><a href=\"#数据结构的组织逻辑图：\" class=\"headerlink\" title=\"数据结构的组织逻辑图：\"></a>数据结构的组织逻辑图：</h3><p><img data-src=\"/images/DataStructure.jpg\" alt=\"数据结构\"></p>\n<h1 id=\"一般线性表\"><a href=\"#一般线性表\" class=\"headerlink\" title=\"一般线性表\"></a>一般线性表</h1><p>线性表是数据结构中最简单的逻辑结构，其特点为一对一，即<strong>线性表中除表头和表位外的每个元素，都有且只有一个直接前驱和一个直接后继，而表头元素只有一个直接后继，没有直接前驱；表尾元素只有一个直接前驱，而无直接后继因此，表中各元素是由先后顺序的</strong>。</p>\n<p>注1：线性表中的各元素都属于同一数据类型，故而占用相同的存储空间，除此之外，线性表长度有限。</p>\n<p>注2：本文对不同存储结构的算法实现都包括：线性表的创建、插入元素、删除元素、查找元素，在本篇中的查找算法使用的都是简单查找，其余查找算法将会由另外的一篇文章给出。</p>\n<p>已经从逻辑结构上介绍了线性表的基本概念，也就是该结构中元素之间的相邻关系，接着就要讨论该如何实现该逻辑结构，这就引出了存储结构的概念。存储结构解决的是线性表在物理上如何存储的问题，线性表的存储结构决定了算法的实现方法，本文将要讨论的是线性表的顺序存储和链式存储。</p>\n<h2 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>顺序存储又被称为顺序表，它利用一组地址连续的存储单元依次存储线性表中的数据元素，特点是<strong>逻辑上相邻的数据元素在物理上也连续，所以顺序表中的元素可以通过首地址和元素序号进行随机访问，时间复杂度为<code>O(1)</code>，但是插入和删除操作都要移动大量元素</strong>。</p>\n<p>顺序表的存储结构可以用下图表示：<br><img data-src=\"/images/arr_list.jpg\" alt=\"数组指针\"></p>\n<h3 id=\"静态顺序表\"><a href=\"#静态顺序表\" class=\"headerlink\" title=\"静态顺序表\"></a>静态顺序表</h3><p>静态顺序表又可以被称为数组，数组的大小和空间在定义后就固定不变，这种内存分配方式被称为静态分配。</p>\n<p><strong>静态顺序表的创建：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InitList</span><span class=\"params\">(SqList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  L-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>;i &lt; MAXSIZE;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[i] = (Elemtype)i;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"length is %d\\n\"</span>,L-&gt;length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的插入：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"keyword\">int</span> i,Elemtype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the scope of i needs to be suitable.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(L-&gt;length &gt;= MAXSIZE) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the length can't more than MAXSIZE.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = L-&gt;length;j &gt;= i;j--)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[j] = L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L-&gt;data[i<span class=\"number\">-1</span>] = e;</span><br><span class=\"line\">  L-&gt;length++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的删除：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"keyword\">int</span> i,Elemtype *e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the scope of i needs to be suitable.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(L-&gt;length &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//the length can't less than one.</span></span><br><span class=\"line\">  *e = L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i;j &lt; L-&gt;length;j++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    L-&gt;data[j<span class=\"number\">-1</span>] = L-&gt;data[j];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L-&gt;length--;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>静态顺序表的查找：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//search the item appears in L for the first time.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ListSearch</span><span class=\"params\">(SqList *L,Elemtype e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; L-&gt;length;i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;data[i] == e) <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态顺序表的实现较为简单，源码路径为</p>\n<h3 id=\"动态线性表\"><a href=\"#动态线性表\" class=\"headerlink\" title=\"动态线性表\"></a>动态线性表</h3><h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"Python3编写猜数字小游戏","date":"2018-03-16T06:57:06.000Z","_content":"\n## 生成神秘数字序列\n \n### 导入random模块\n```python\nimport random \n```\n### 使用range()生成0-9的序列，并使用random模块将其随机化\n```python\ndef getSecretNum():\n\tnumbers = list(range(10))\n\trandom.shuffle(numbers)\n\tsecretNum = ''\n\tfor i in range(NUM_LENGTH):\n\t\tsecretNum += str(numbers[i])\n\treturn secretNum\n```\n<!-- more -->\n<!-- more -->\nrandom模块的shuffle方法可将输入的原序列替换成随机序列。\n## 对玩家输入的序列进行处理\n### 根据玩家输入的序列给出相应的提示\n```python\ndef getClues(guess,secretNum):\n\t# return a string made up of Pico,Fermi,Bagels\n\tif guess == secretNum:\n\t\treturn \"Great,you got it!\"\n\telse:\n\t\tclues = []\n\t\tfor i in range(len(guess)):\n\t\t\tif guess[i] == secretNum[i]:\n\t\t\t\tclues.append('Fermi')\n\t\t\telif guess[i] in secretNum:\n\t\t\t\tclues.append('Pico')\n\t\tif len(clues) == 0:\n\t\t\treturn 'Bagels'\n\t\tclues.sort()\n\t\treturn ' '.join(clues)\n```\n### 定义一个参数检查函数，避免出现不正当输入\n```python\ndef isOnlyDigits(num):\n\t#judge whether the input from gameplayer is true or not\n\tif num == '':\n\t\treturn False\n\telse:\n\t\tfor i in num:\n\t\t\tif i not in '0 1 2 3 4 5 6 7 8 9'.split():\n\t\t\t\treturn False\n\t\treturn True\n```\n\n\n\n\n","source":"_posts/猜数字小游戏.md","raw":"---\ntitle: Python3编写猜数字小游戏\ndate: 2018-03-16 14:57:06\ntags: Python3\ncategories: Python3\n\n---\n\n## 生成神秘数字序列\n \n### 导入random模块\n```python\nimport random \n```\n### 使用range()生成0-9的序列，并使用random模块将其随机化\n```python\ndef getSecretNum():\n\tnumbers = list(range(10))\n\trandom.shuffle(numbers)\n\tsecretNum = ''\n\tfor i in range(NUM_LENGTH):\n\t\tsecretNum += str(numbers[i])\n\treturn secretNum\n```\n<!-- more -->\n<!-- more -->\nrandom模块的shuffle方法可将输入的原序列替换成随机序列。\n## 对玩家输入的序列进行处理\n### 根据玩家输入的序列给出相应的提示\n```python\ndef getClues(guess,secretNum):\n\t# return a string made up of Pico,Fermi,Bagels\n\tif guess == secretNum:\n\t\treturn \"Great,you got it!\"\n\telse:\n\t\tclues = []\n\t\tfor i in range(len(guess)):\n\t\t\tif guess[i] == secretNum[i]:\n\t\t\t\tclues.append('Fermi')\n\t\t\telif guess[i] in secretNum:\n\t\t\t\tclues.append('Pico')\n\t\tif len(clues) == 0:\n\t\t\treturn 'Bagels'\n\t\tclues.sort()\n\t\treturn ' '.join(clues)\n```\n### 定义一个参数检查函数，避免出现不正当输入\n```python\ndef isOnlyDigits(num):\n\t#judge whether the input from gameplayer is true or not\n\tif num == '':\n\t\treturn False\n\telse:\n\t\tfor i in num:\n\t\t\tif i not in '0 1 2 3 4 5 6 7 8 9'.split():\n\t\t\t\treturn False\n\t\treturn True\n```\n\n\n\n\n","slug":"猜数字小游戏","published":1,"updated":"2020-08-12T15:43:29.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdrl30ms000pvkv99t7r5wwy","content":"<h2 id=\"生成神秘数字序列\"><a href=\"#生成神秘数字序列\" class=\"headerlink\" title=\"生成神秘数字序列\"></a>生成神秘数字序列</h2><h3 id=\"导入random模块\"><a href=\"#导入random模块\" class=\"headerlink\" title=\"导入random模块\"></a>导入random模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用range-生成0-9的序列，并使用random模块将其随机化\"><a href=\"#使用range-生成0-9的序列，并使用random模块将其随机化\" class=\"headerlink\" title=\"使用range()生成0-9的序列，并使用random模块将其随机化\"></a>使用range()生成0-9的序列，并使用random模块将其随机化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSecretNum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tnumbers = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">\trandom.shuffle(numbers)</span><br><span class=\"line\">\tsecretNum = <span class=\"string\">''</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(NUM_LENGTH):</span><br><span class=\"line\">\t\tsecretNum += str(numbers[i])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> secretNum</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<!-- more -->\n<p>random模块的shuffle方法可将输入的原序列替换成随机序列。</p>\n<h2 id=\"对玩家输入的序列进行处理\"><a href=\"#对玩家输入的序列进行处理\" class=\"headerlink\" title=\"对玩家输入的序列进行处理\"></a>对玩家输入的序列进行处理</h2><h3 id=\"根据玩家输入的序列给出相应的提示\"><a href=\"#根据玩家输入的序列给出相应的提示\" class=\"headerlink\" title=\"根据玩家输入的序列给出相应的提示\"></a>根据玩家输入的序列给出相应的提示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getClues</span><span class=\"params\">(guess,secretNum)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># return a string made up of Pico,Fermi,Bagels</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> guess == secretNum:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Great,you got it!\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tclues = []</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(guess)):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> guess[i] == secretNum[i]:</span><br><span class=\"line\">\t\t\t\tclues.append(<span class=\"string\">'Fermi'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">elif</span> guess[i] <span class=\"keyword\">in</span> secretNum:</span><br><span class=\"line\">\t\t\t\tclues.append(<span class=\"string\">'Pico'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(clues) == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'Bagels'</span></span><br><span class=\"line\">\t\tclues.sort()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">' '</span>.join(clues)</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义一个参数检查函数，避免出现不正当输入\"><a href=\"#定义一个参数检查函数，避免出现不正当输入\" class=\"headerlink\" title=\"定义一个参数检查函数，避免出现不正当输入\"></a>定义一个参数检查函数，避免出现不正当输入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isOnlyDigits</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\">#judge whether the input from gameplayer is true or not</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num == <span class=\"string\">''</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> num:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">'0 1 2 3 4 5 6 7 8 9'</span>.split():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"生成神秘数字序列\"><a href=\"#生成神秘数字序列\" class=\"headerlink\" title=\"生成神秘数字序列\"></a>生成神秘数字序列</h2><h3 id=\"导入random模块\"><a href=\"#导入random模块\" class=\"headerlink\" title=\"导入random模块\"></a>导入random模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用range-生成0-9的序列，并使用random模块将其随机化\"><a href=\"#使用range-生成0-9的序列，并使用random模块将其随机化\" class=\"headerlink\" title=\"使用range()生成0-9的序列，并使用random模块将其随机化\"></a>使用range()生成0-9的序列，并使用random模块将其随机化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSecretNum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tnumbers = list(range(<span class=\"number\">10</span>))</span><br><span class=\"line\">\trandom.shuffle(numbers)</span><br><span class=\"line\">\tsecretNum = <span class=\"string\">''</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(NUM_LENGTH):</span><br><span class=\"line\">\t\tsecretNum += str(numbers[i])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> secretNum</span><br></pre></td></tr></table></figure>","more":"<!-- more -->\n<p>random模块的shuffle方法可将输入的原序列替换成随机序列。</p>\n<h2 id=\"对玩家输入的序列进行处理\"><a href=\"#对玩家输入的序列进行处理\" class=\"headerlink\" title=\"对玩家输入的序列进行处理\"></a>对玩家输入的序列进行处理</h2><h3 id=\"根据玩家输入的序列给出相应的提示\"><a href=\"#根据玩家输入的序列给出相应的提示\" class=\"headerlink\" title=\"根据玩家输入的序列给出相应的提示\"></a>根据玩家输入的序列给出相应的提示</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getClues</span><span class=\"params\">(guess,secretNum)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># return a string made up of Pico,Fermi,Bagels</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> guess == secretNum:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Great,you got it!\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tclues = []</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(guess)):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> guess[i] == secretNum[i]:</span><br><span class=\"line\">\t\t\t\tclues.append(<span class=\"string\">'Fermi'</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">elif</span> guess[i] <span class=\"keyword\">in</span> secretNum:</span><br><span class=\"line\">\t\t\t\tclues.append(<span class=\"string\">'Pico'</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> len(clues) == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'Bagels'</span></span><br><span class=\"line\">\t\tclues.sort()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">' '</span>.join(clues)</span><br></pre></td></tr></table></figure>\n<h3 id=\"定义一个参数检查函数，避免出现不正当输入\"><a href=\"#定义一个参数检查函数，避免出现不正当输入\" class=\"headerlink\" title=\"定义一个参数检查函数，避免出现不正当输入\"></a>定义一个参数检查函数，避免出现不正当输入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isOnlyDigits</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\">#judge whether the input from gameplayer is true or not</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num == <span class=\"string\">''</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> num:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> <span class=\"string\">'0 1 2 3 4 5 6 7 8 9'</span>.split():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdrl30mf0009vkv9blk468qv","category_id":"ckdrl30m90004vkv97d09h4rv","_id":"ckdrl30mq000jvkv96knj33xt"},{"post_id":"ckdrl30m40001vkv9c8gy8zow","category_id":"ckdrl30m90004vkv97d09h4rv","_id":"ckdrl30ms000ovkv99znl7hkm"},{"post_id":"ckdrl30m80003vkv947468gyr","category_id":"ckdrl30m90004vkv97d09h4rv","_id":"ckdrl30mt000qvkv9czo9f9wv"},{"post_id":"ckdrl30md0007vkv9fw2w2zpn","category_id":"ckdrl30mq000kvkv99sxuajxd","_id":"ckdrl30mu000uvkv92zg8966o"},{"post_id":"ckdrl30mi000bvkv9dfujhy5y","category_id":"ckdrl30mt000rvkv94mtw2e21","_id":"ckdrl30mv000zvkv90scggbe5"},{"post_id":"ckdrl30mo000ivkv912kgdt4n","category_id":"ckdrl30mq000kvkv99sxuajxd","_id":"ckdrl30mw0012vkv956977o16"},{"post_id":"ckdrl30mr000nvkv9dv218ici","category_id":"ckdrl30mv000yvkv951z6hyjs","_id":"ckdrl30mx0016vkv9hzzv261t"},{"post_id":"ckdrl30ms000pvkv99t7r5wwy","category_id":"ckdrl30mw0013vkv991ae5a7r","_id":"ckdrl30mx0018vkv9bizs6b0q"}],"PostTag":[{"post_id":"ckdrl30mf0009vkv9blk468qv","tag_id":"ckdrl30mc0005vkv9cn0yadkd","_id":"ckdrl30mm000evkv9dwlzf05s"},{"post_id":"ckdrl30m40001vkv9c8gy8zow","tag_id":"ckdrl30mc0005vkv9cn0yadkd","_id":"ckdrl30mo000hvkv94cj6718a"},{"post_id":"ckdrl30m80003vkv947468gyr","tag_id":"ckdrl30mc0005vkv9cn0yadkd","_id":"ckdrl30mr000mvkv9ha4c78my"},{"post_id":"ckdrl30md0007vkv9fw2w2zpn","tag_id":"ckdrl30mq000lvkv93c1hh9ks","_id":"ckdrl30mu000tvkv90fpsbdzk"},{"post_id":"ckdrl30mi000bvkv9dfujhy5y","tag_id":"ckdrl30mt000svkv90koq2kaw","_id":"ckdrl30mv000xvkv91i5i3dms"},{"post_id":"ckdrl30mo000ivkv912kgdt4n","tag_id":"ckdrl30mq000lvkv93c1hh9ks","_id":"ckdrl30mw0011vkv92a544yv7"},{"post_id":"ckdrl30mr000nvkv9dv218ici","tag_id":"ckdrl30mw0010vkv948ue55fn","_id":"ckdrl30mx0015vkv91otqbbev"},{"post_id":"ckdrl30ms000pvkv99t7r5wwy","tag_id":"ckdrl30mw0014vkv9cens8jfg","_id":"ckdrl30mx0017vkv9bl259hz5"}],"Tag":[{"name":"爬虫","_id":"ckdrl30mc0005vkv9cn0yadkd"},{"name":"C++","_id":"ckdrl30mq000lvkv93c1hh9ks"},{"name":"区块链","_id":"ckdrl30mt000svkv90koq2kaw"},{"name":"数据结构及算法","_id":"ckdrl30mw0010vkv948ue55fn"},{"name":"Python3","_id":"ckdrl30mw0014vkv9cens8jfg"}]}}